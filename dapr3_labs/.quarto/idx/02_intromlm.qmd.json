{"title":"Introducing Multilevel Models","markdown":{"yaml":{"title":"Introducing Multilevel Models","link-citations":"yes","params":{"SHOW_SOLS":true,"TOGGLE":true}},"headingText":"Introducing Multilevel Models","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nsource('assets/setup.R')\nlibrary(tidyverse)\nlibrary(patchwork)\nlibrary(effects)\ntoys_read <- read_csv(\"https://uoepsy.github.io/data/toyexample.csv\")\n```\n\n:::green\n__Information about solutions__\n\nSolutions for these exercises are available immediately below each question.  \nWe would like to emphasise that much evidence suggests that testing enhances learning, and we __strongly__ encourage you to make a concerted attempt at answering each question *before* looking at the solutions. Immediately looking at the solutions and then copying the code into your work will lead to poorer learning.  \nWe would also like to note that there are always many different ways to achieve the same thing in R, and the solutions provided are simply _one_ approach.  \n\n:::\n\n\n:::lo\n**Preliminaries**  \n \n1. Create a new RMarkdown document or R script (whichever you like) for this week. \n\n**A Note on terminology**\n\nThe methods we're going to learn about in the first five weeks of this course are known by lots of different names: \"multilevel models\"; \"hierarchical linear models\"; \"mixed-effect models\"; \"mixed models\"; \"nested data models\"; \"random coefficient models\"; \"random-effects models\"; \"random parameter models\"... and so on).   \n\nWhat the idea boils down to is that **model parameters vary at more than one level.** This week, we're going to explore what that means.  \n\nThroughout this course, we will tend to use the terms \"mixed effect model\", \"linear mixed model (LMM)\" and \"multilevel model (MLM)\" interchangeably. \n:::\n\n\n\n\n:::yellow \n\nMultilevel Models (MLMs) (or \"Linear Mixed Models\" (LMMs)) take the approach of allowing the groups/clusters to vary around our $\\beta$ estimates. \n\nIn the lectures, we saw this as:\n\n$$\n\\begin{align}\n& \\text{for observation }j\\text{ in group }i \\\\\n\\quad \\\\\n& \\text{Level 1:} \\\\\n& \\color{red}{y_{ij}}\\color{black} = \\color{blue}{\\beta_{0i} \\cdot 1 + \\beta_{1i} \\cdot x_{ij}}\\color{black} + \\varepsilon_{ij} \\\\\n& \\text{Level 2:} \\\\\n& \\color{blue}{\\beta_{0i}}\\color{black} = \\gamma_{00} + \\color{orange}{\\zeta_{0i}} \\\\\n& \\color{blue}{\\beta_{1i}}\\color{black} = \\gamma_{10} + \\color{orange}{\\zeta_{1i}} \\\\\n\\quad \\\\\n& \\text{Where:} \\\\\n& \\gamma_{00}\\text{ is the population intercept, and }\\color{orange}{\\zeta_{0i}}\\color{black}\\text{ is the deviation of group }i\\text{ from }\\gamma_{00} \\\\\n& \\gamma_{10}\\text{ is the population slope, and }\\color{orange}{\\zeta_{1i}}\\color{black}\\text{ is the deviation of group }i\\text{ from }\\gamma_{10} \\\\\n\\end{align}\n$$\n\nWe are now assuming $\\color{orange}{\\zeta_0}$, $\\color{orange}{\\zeta_1}$, and $\\varepsilon$ to be normally distributed with a mean of 0, and we denote their variances as $\\sigma_{\\color{orange}{\\zeta_0}}^2$, $\\sigma_{\\color{orange}{\\zeta_1}}^2$, $\\sigma_\\varepsilon^2$ respectively. \n\nThe $\\color{orange}{\\zeta}$ components also get termed the \"random effects\" part of the model, Hence names like \"random effects model\", etc. \n\n`r optbegin(\"Alternative notation\", toggle=params$TOGGLE)`\nMany people use the symbol $u$ in place of $\\zeta$.  \nIn various resources, you are likely to see $\\alpha$ used to denote the intercept instead of $\\beta_0$.  \n\nSometimes, you will see the levels collapsed into one equation, as it might make for more intuitive reading. This often fits with the name \"mixed effects\" for these models:\n\n$$\n\\color{red}{y_{ij}}\\color{black} = (\\color{blue}{\\beta_0}\\color{black} + \\color{orange}{\\zeta_{0i}}\\color{black}) \\cdot 1 + ( \\color{blue}{\\beta_{1}}\\color{black} + \\color{orange}{\\zeta_{1i}} \\color{black}) \\cdot x_{ij}  +  \\varepsilon_{ij} \\\\\n$$\n\nAnd then we also have the condensed matrix form of the model, in which the Z matrix represents the grouping structure, and the $u$ (or $\\zeta$) are the estimated random deviations. \n$$\n\\mathbf{y} = \\boldsymbol{X\\beta} + \\boldsymbol{Zu} + \\boldsymbol{\\varepsilon}\n$$\n`r optend()`\n\n:::\n\n# Fitting Multilevel Models\n\n## Introducing **lme4** \n\n:::rtip\n\nWe're going to use the `lme4` package, and specifically the functions `lmer()` and `glmer()`.  \n\"(g)lmer\" here stands for \"(generalised) linear mixed effects regression\". \n\nYou will have seen some use of these functions in the lectures. The broad syntax is:  \n<br>\n<div style=\"margin-left:50px;\">**lmer(*formula*, REML = *logical*, data = *dataframe*)**</div>    \n<br>\n\nWe write the first bit of our **formula** just the same as our old friend the normal linear model `y ~ 1 + x + x2 + ...`, where `y` is the name of our outcome variable, `1` is the intercept (which we don't have to explicitly state as it will be included anyway) and `x`, `x2` etc are the names of our explanatory variables.  \n\nWith **lme4**, we now have the addition of __random effect terms)), specified in parenthesis with the `|` operator (the vertical line | is often found to the left of the z key on QWERTY keyboards).  \nWe use the `|` operator to separate the parameters (intercept, slope etc.) on the LHS, from the grouping variable(s) on the RHS, by which we would like to model these parameters as varying.  \n\n__Random Intercept__  \nLet us suppose that we wish to model our intercept not as a fixed constant, but as varying randomly according to some grouping around a fixed center. \nWe can such a model by allowing the intercept to vary by our grouping variable (`g` below): \n\n:::statbox\n<center>`lmer(y ~ 1 + x + (1|g), data = df)`</center>\n$$\n\\begin{align}\n& \\text{Level 1:} \\\\\n& \\color{red}{Y_{ij}} = \\color{blue}{\\beta_{0i} \\cdot 1 + \\beta_{1} \\cdot X_{ij}} + \\varepsilon_{ij} \\\\\n& \\text{Level 2:} \\\\\n& \\color{blue}{\\beta_{0i}} = \\gamma_{00} + \\color{orange}{\\zeta_{0i}} \\\\\n\\end{align}\n$$\n:::\n\n\n\n\n__Random Slope__  \nBy extension we can also allow the effect `y~x` to vary between groups, by including the `x` on the left hand side of `|` in the random effects part of the call to `lmer()`.\n\n:::statbox\n<center>`lmer(y ~ 1 + x + (1 + x |g), data = df)`</center>\n$$\n\\begin{align}\n& \\text{Level 1:} \\\\\n& \\color{red}{y_{ij}} = \\color{blue}{\\beta_{0i} \\cdot 1 + \\beta_{1i} \\cdot x_{ij}} + \\varepsilon_{ij} \\\\\n& \\text{Level 2:} \\\\\n& \\color{blue}{\\beta_{0i}} = \\gamma_{00} + \\color{orange}{\\zeta_{0i}} \\\\\n& \\color{blue}{\\beta_{1i}} = \\gamma_{10} + \\color{orange}{\\zeta_{1i}} \\\\\n\\end{align}\n$$\n:::\n:::\n\n\n\n## Estimation\n\n### Maximum Likelihood (ML)  \n\nRemember back to DAPR2 when we introduced logistic regression, and we briefly discussed **Maximum likelihood** in an explanation of how models are fitted.  \n\nThe key idea of *maximum likelihood estimation* (MLE) is that we (well, the computer) iteratively finds the set of estimates for our model which it considers to best reproduce our observed data. Recall our simple linear regression model of how practice (hrs per week) affects reading age: \n$$\n\\color{red}{ReadingAge_i} = \\color{blue}{\\beta_0 \\cdot{} 1 + \\beta_1 \\cdot{} Practice_{i}} + \\varepsilon_i\n$$\nThere are values of $\\beta_0$ and $\\beta_1$ and $\\sigma_\\varepsilon$ which maximise the probability of observing the data that we have. For linear regression, these we obtained these same values a different way, via minimising the sums of squares. And we saw that this is not possible for more complex models (e.g., logistic), which is where we turn to MLE.  \n\n:::statbox\nTo read about the subtle difference between \"likelihood\" and \"probability\", you can find a short explanation at https://uoepsy.github.io/faq/lvp.html\n:::\n\nIf we are estimating just one single parameter (e.g. a mean), then we can imagine the process of *maximum likelihood estimation* in a one-dimensional world - simply finding the top of the curve: \n```{r echo=FALSE, out.width=\"350px\", fig.cap=\"MLE\"}\nknitr::include_graphics(\"images/intro/mle.png\")\n```\nHowever, our typical models estimate a whole bunch of parameters. The simple regression model above is already having to estimate $\\beta_0$, $\\beta_1$ and $\\sigma_\\varepsilon$, and our multi-level models have far more! With lots of parameters being estimated and all interacting to influence the likelihood, our nice curved line becomes a complex surface (see Left panel of Figure \\@ref(fig:multisurf)). So what we (our computers) need to do is find the maximum, but avoid local maxima and singularities (see Figure \\@ref(fig:maxima)). \n```{r multisurf, echo=FALSE, out.width=\"49%\", fig.cap=\"MLE for a more complex model\",fig.align='center'}\nknitr::include_graphics(\"images/multisurftb.png\")\n```\n\n### Restricted Maximum Likelihood (REML)\n\nWhen it comes to estimating multilevel models, maximum likelihood will consider the fixed effects as unknown values in its estimation of the variance components (the random effect variances). This leads to biased estimates of the variance components, specifically biasing them toward being too small, especially if $n_\\textrm{clusters} - n_\\textrm{level 2 predictors} - 1 < 50$. Restricted Maximum Likelihood (REML), however, separates the estimation of fixed and random parts of the model, leading to unbiased estimates of the variance components.  \n\n:::rtip\n`lmer()` models are by default fitted with REML. This is better for small samples. \n:::\n\n\n:::statbox\n__Comparing Models, ML & REML__  \n\nWhen we compare models that differ in their fixed effects via comparing model deviance (e.g. the likelihood ratio), REML should __not__ be used as only the variance components are included in the likelihood. Functions like `anova()` will automatically refit your models with `ML` for you, but it is worth checking.   \n  \nWe __cannot__ compare (either with ML or REML) models that differ in both the fixed and random parts. \n\n:::\n\n\n### Model Convergence\n\nFor large datasets and/or complex models (lots of random-effects terms), it is quite common to get a *convergence warning*.  There are lots of different ways to [deal with these](https://rstudio-pubs-static.s3.amazonaws.com/33653_57fc7b8e5d484c909b615d8633c01d51.html) (to try to rule out hypotheses about what is causing them).  \n\nFor now, if `lmer()` gives you convergence errors, you could try changing the optimizer. Bobyqa is a good one: add `control = lmerControl(optimizer = \"bobyqa\")` when you run your model.  \n\n```{r eval=F}\nlmer(y ~ 1 + x1 + ... + (1 + .... | g), data = df, \n     control = lmerControl(optimizer = \"bobyqa\"))\n```\n\n`r optbegin(\"What *is* a convergence warning??\", olabel=FALSE, toggle=params$TOGGLE)`\nThere are different techniques for maximum likelihood estimation, which we apply by using different 'optimisers'. Technical problems to do with **model convergence** and **'singular fit'** come into play when the optimiser we are using either can't find a suitable maximum, or gets stuck in a singularity (think of it like a black hole of likelihood, which signifies that there is not enough variation in our data to construct such a complex model).  \n\n```{r maxima, echo=FALSE, out.width=\"49%\", fig.cap=\"local/global maxima and singularities\", fig.align=\"center\"}\nknitr::include_graphics(\"images/intro/mle2.png\")\n```\n\n`r optend()`\n\n# Exercises\n\n## Toy Dataset\n\n:::frame\n<div style=\"display:inline-block; width: 45%;vertical-align: middle;\">\nRecall our toy example data in which we might use linear regression to determine how practice (in hours per week) influences the reading age of different toy figurines. We have data on various types of toys, from Playmobil to Powerrangers, to Farm Animals.\n</div>\n<div style=\"display:inline-block; width: 45%;vertical-align: middle;\">\n```{r echo=FALSE, out.width=\"300px\",fig.align=\"center\"}\nknitr::include_graphics(\"images/intro/toys.png\")\n```\n</div>\n```{r message=FALSE,warning=FALSE}\ntoys_read <- read_csv(\"https://uoepsy.github.io/data/toyexample.csv\")\n```\n:::\n\n\n`r qbegin(\"A3\")`\nUsing `lmer()` from the **lme4** package, fit a model of practice (`hrs_week`) predicting Reading age (`R_AGE`), with by-toytype random intercepts.  \nPass the model to `summary()` to see the output. \n`r qend()`\n`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`\n```{r}\nlibrary(lme4)\nri_model <- lmer(R_AGE ~ hrs_week + (1 | toy_type), data = toys_read)\nsummary(ri_model)\n```\n`r solend()`\n\n`r qbegin(\"A4\")`\nSometimes the easiest way to start understanding your model is to visualise it. \n \nLoad the package **broom.mixed**. Along with some handy functions `tidy()` and `glance()` which give us the information we see in `summary()`, there is a handy function called `augment()` which returns us the data in the model plus the fitted values, residuals, hat values, Cook's D etc.. \n```{r}\nri_model <- lmer(R_AGE ~ hrs_week + (1 | toy_type), data = toys_read)\nlibrary(broom.mixed)\naugment(ri_model)\n```\n\nAdd to the code below to plot the model fitted values, and color them according to toy type.  \n(you will need to edit `ri_model` to be whatever name you assigned to your model).\n\n```{r eval=FALSE}\naugment(ri_model) %>%\n  ggplot(aes(x = hrs_week, y = ...... \n```\n\n`r qend()`\n`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`\n\n```{r}\naugment(ri_model) %>%\n  ggplot(aes(x = hrs_week, y = .fitted, col = toy_type)) + \n  geom_line()\n```\n`r solend()`\n\n\n`r qbegin(\"A5\")`\nWe have just fitted the model:\n$$\n\\begin{align}\n& \\text{For toy } j \\text{ of toy-type } i \\\\\n& \\color{red}{\\textrm{Reading_Age}_{ij}} = \\color{blue}{\\beta_{0i} \\cdot 1 + \\beta_{1} \\cdot \\textrm{Practice}_{ij}} + \\varepsilon_{ij} \\\\\n& \\color{blue}{\\beta_{0i}} = \\gamma_{00} + \\color{orange}{\\zeta_{0i}} \\\\\n\\end{align}\n$$\n\nFor our estimates of $\\gamma_{00}$ (the fixed value around which toy-type intercepts vary) and $\\beta_1$ (the fixed estimate of the relationship between reading age and practice), we can use `fixef()`.  \n```{r}\nfixef(ri_model)\n```\nCan you add to the plot in the previous question, a thick black line with the intercept and slope given by `fixef()`?  \n\n**Hint:** `geom_abline()`\n\n`r qend()`\n`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`\n\n```{r}\naugment(ri_model) %>%\n  ggplot(aes(x = hrs_week, y = .fitted, col = toy_type)) + \n  geom_line() + \n  geom_abline(intercept = fixef(ri_model)[1], slope = fixef(ri_model)[2], lwd = 2)\n```\n`r solend()`\n\n`r qbegin(\"A6\")`\nBy now, you should have a plot which looks more or less like the left-hand figure below (we have added on the raw data - the points).  \n<div style=\"display:inline-block; width: 55%;vertical-align: top;\">\n```{r modfit, echo=FALSE, fig.asp=1, fig.cap=\"Model fitted values\"}\naugment(ri_model) %>%\n  ggplot(aes(x = hrs_week, y = .fitted, col = toy_type)) + \n  geom_line() + \n  geom_abline(intercept = fixef(ri_model)[1], slope = fixef(ri_model)[2], lwd = 2)+\n  geom_point(aes(y=R_AGE), alpha=.4)\n```\n</div>\n<div style=\"display:inline-block; width: 40%;vertical-align: top;\">\n```{r lmersummap, echo=FALSE, out.width=\"400px\", fig.cap=\"Summary model output<br>lmer(R_AGE~1 + hrs_week + (1|toy_type),<br>data = toys_read)\"}\nknitr::include_graphics(\"images/intro/summarylmer.png\")\n```\n</div>\n<br>\n<br>\nWe're going to map the parts of the plot in Figure \\@ref(fig:modfit) to the `summary()` output of the model in Figure \\@ref(fig:lmersummap). Match the coloured sections Red, Orange, Yellow and Blue in Figure \\@ref(fig:lmersummap) to the descriptions below of \\@ref(fig:modfit) A through D. \n\nA) where the black line cuts the y axis\nB) the standard deviation of the distances from all the individual toy types lines to the black lines\nC) the slope of the black lines\nD) the standard deviation of the distances from all the individual observations to the line for the toy type to which it belongs.\n\n`r qend()`\n`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`\n\n+ Yellow = B   \n+ Red = D  \n+ Blue = A  \n+ Orange = C  \n\n`r solend()`\n\n\n`r qbegin(\"A7 - Harder\")`\nCan you now map those same coloured sections in Figure \\@ref(fig:lmersummap) to the mathematical terms in the model equation:  \n\n$$\n\\begin{align}\n& \\text{Level 1:} \\\\\n& \\color{red}{ReadingAge_{ij}} = \\color{blue}{\\beta_{0i} \\cdot 1 + \\beta_{1} \\cdot Practice_{ij}} + \\varepsilon_{ij} \\\\\n& \\text{Level 2:} \\\\\n& \\color{blue}{\\beta_{0i}} = \\gamma_{00} + \\color{orange}{\\zeta_{0i}} \\\\\n\\quad \\\\\n& \\text{where} \\\\\n& \\color{orange}{\\zeta_0} \\sim N(0, \\sigma_{\\color{orange}{\\zeta_{0}}})  \\text{ independently} \\\\\n& \\varepsilon \\sim N(0, \\sigma_{\\varepsilon}) \\text{ independently} \\\\\n\\end{align}\n$$\n\n`r qend()`\n`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`\n\n+ Yellow = $\\sigma_{\\color{orange}{\\zeta_{0}}}$   \n+ Red = $\\sigma_{\\varepsilon}$    \n+ Blue = $\\gamma_{00}$  \n+ Orange = $\\beta_{1}$   \n\n`r solend()`\n\n`r qbegin(\"A8\")`\nFit a model which allows *also* (along with the intercept) the effect of practice (`hrs_week`) to vary by-toytype.  \nThen, using `augment()` again, plot the model fitted values. What do you think you will see? \n`r qend()`\n`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`\n```{r}\nrs_model <- lmer(R_AGE ~ 1 + hrs_week + (1 + hrs_week | toy_type), data = toys_read)\naugment(rs_model) %>%\n  ggplot(aes(x = hrs_week, y = .fitted, col = toy_type)) + \n  geom_line() + \n  geom_point(aes(y=R_AGE), alpha=.4)\n```\n\n`r solend()`\n\n\n`r qbegin(\"A9\")`\nPlot the model fitted values but *only* for the Farm Animals and the Scooby Doo toys, and add the observed reading ages too.  \nDo this for both the model with the random intercept only, and the model with both the random intercept and slope.  \n`r qend()`\n`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`\n```{r}\naugment(ri_model) %>%\n  filter(str_detect(toy_type, \"Scooby|Farm\")) %>%\n  ggplot(aes(x = hrs_week, y = .fitted, col = toy_type)) + \n  geom_line() + \n  geom_point(aes(y=R_AGE), alpha=.4)\n\naugment(rs_model) %>%\n  filter(str_detect(toy_type, \"Scooby|Farm\")) %>%\n  ggplot(aes(x = hrs_week, y = .fitted, col = toy_type)) + \n  geom_line() + \n  geom_point(aes(y=R_AGE), alpha=.4)\n```\n\n`r solend()`\n\n## Basketball/HRV\n\nWhile the toy example considers the groupings or 'clusters' of different types of toy, a more relate-able grouping in psychological research is that of several observations belonging to the same individual. One obvious benefit of this is that we can collect many more observations with fewer participants, and account for the resulting dependency of observations. \n\n:::frame\n\nRecall the data from the previous week, from an experiment in which heart rate variability (HRV) was measured for amateur basketball players when tasked with scoring a goal with varying levels and type of potential loss/reward. \n\nThe data was split over two files. The code below will read in both datasets and join them for you:\n\n```{r}\nlibrary(readxl)\ndownload.file(url = \"https://uoepsy.github.io/data/basketballhrv.xlsx\", \n              destfile = \"baskeballhrvdata.xlsx\")\n\nbball <- \n  left_join(\n    read_csv(\"https://uoepsy.github.io/data/basketballconditions.csv\"),\n    read_xlsx(\"baskeballhrvdata.xlsx\") %>%\n      pivot_longer(trial_1:trial_20, names_to = \"trial_no\", values_to = \"hrv\")\n  ) %>%\n  mutate(sub = factor(sub))\n```\n\n__!!! Note__ if `read_xlsx()` was causing problems for you, this will also work:\n```{r eval=FALSE}\nbball <- \n  left_join(\n    read_csv(\"https://uoepsy.github.io/data/basketballconditions.csv\"),\n    read_csv(\"https://uoepsy.github.io/data/bballhrv.csv\") %>%\n      pivot_longer(trial_1:trial_20, names_to = \"trial_no\", values_to = \"hrv\")\n  ) %>%\n  mutate(sub = factor(sub))\n```\n:::\n\n`r qbegin(\"B1\")`\nRecall that the research question was concerned with how the size and type of potential reward influence stress levels (as measured by heart rate variability):\n\n> How do size and type of reward/loss interact to influence levels of stress?  \n\nRemember to think about:  \n  - what is our outcome variable of interest?\n  - what is the clustering?\n  - does size of reward vary within clusters, or between?\n  - does type of reward vary within clusters, or between?\n  \nCan you fit a linear mixed model to examine the effects of size and type of reward on HRV, and their interaction?  \n\n**Tip:** If you get an error about model convergence, consider changing the optimiser (see [above](02_intromlm.html#Estimation))\n`r qend()`\n`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`\n\n```{r}\nmod <- lmer(hrv ~ stakes * condition + (1 + stakes | sub), data = bball,\n            control = lmerControl(optimizer=\"bobyqa\"))\nsummary(mod)\n```\n\n`r solend()`\n\n`r qbegin(\"B2\")`\nConstruct some parametric bootstrapped confidence intervals for your fixed effects. \n\nUsing the __sjPlot__ package, produce a plot of the interaction between size and type of reward on HRV. Before you get R to make your plot, can you predict what it is going to look like? \n```{r echo=FALSE}\ntibble(\n  stakes = 0:20,\n  hrv = seq(3.5,5.5, length.out=21),\n  condition = sample(c(\"money\",\"kudos\"),21,replace=T)\n) %>%\n  ggplot(.,aes(x=stakes,y=hrv, col=condition))+\n  scale_y_continuous(breaks=c(4,5))+\n  geom_line(lwd=0)\n```\n\n`r qend()`\n`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`\n```{r}\nfixef(mod)\nconfint(mod, method=\"boot\")\n```\n\nThe intercept is about 5, and there is no significant difference between the reward and money conditions, so both lines will start around 5 (the \"money\" line will be `r fixef(mod)[3] %>% round(2)` lower). The coefficient for `stakes` is pretty much 0, so we know that the line for the reference group (condition = \"kudos\" will be fairly flat). The interaction indicates that when we move from the \"kudos\" to the \"money\" condition, we adjust the effect of `stakes` by `r fixef(mod)[4] %>% round(2)`, so the line for the \"money\" condition will be going slightly more downward than that for the \"kudos\" condition. However, 0 is well within the 95% CI for this interaction term, so we would expect the errorbars around the lines to be overlapping. \n\n```{r}\nlibrary(sjPlot)\nplot_model(mod, type = \"int\")\n```\n\n`r solend()`\n\n\n## WeightMaintain Study\n\n\nAnother very crucial advantage is that we can use the same methods to study how people change over time.  \n\n:::frame\n__WeightMaintain Data Codebook__  \n\nThe weight maintenance data (`WeightMaintain3`), a made-up data set based on Lowe et al. (2014, Obesity, 22, 94-100), contains information on overweight participants who completed a 12-week weight loss program, and were then randomly assigned to one of three weight maintenance conditions:\n\n* None (Control)  \n* MR (meal replacements): use MR to replace one meal and snack per day  \n* ED (energy density intervention): book and educational materials on purchasing and preparing foods lower in ED (reducing fat content and/or increasing water content of foods)  \n\nWeight was assessed at baseline (start of maintenance), 12 months post, 24 months post, and 36 months post.  \n\nIt is available, in **.rda** format, at https://uoepsy.github.io/data/WeightMaintain3.rda \n:::\n\n\n`r qbegin(\"C1\")`\nLoad the data, and take a look at what is in there. Hopefully it should match the description above.  \n\n**Hint:** `load(url(\"https://uoepsy.github.io/data/WeightMaintain3.rda\"))`\n`r qend()`\n`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`\n```{r}\nload(url(\"https://uoepsy.github.io/data/WeightMaintain3.rda\"))\nsummary(WeightMaintain3)\nhead(WeightMaintain3)\n```\n`r solend()`\n\n`r qbegin(\"C2\")`  \n\n> Q: Overall, did the participants maintain their weight loss or did their weights change?\n\nEach of our participants have measurements at 4 assessments. \nWe need to think about what this means for the **random effects** that we will include in our model (our **random effect structure**). Would we like our models to accommodate individuals to vary in their starting weight change, to vary in their weight change over the course of the assessment period, or both?\n\nTo investigate whether weights changed over the course of the assessments, or whether they stayed the same, we can fit and compare 2 models:  \n\n1. The \"null\" or \"intercept-only\" model. \n2. A model with weight change predicted by assessment.  \n\nAnd we can then compare them in terms of model fit. As discussed in the lecture, there are lots of ways to assess inference in multilevel models. \n\nOur sample size here (180 participants, each with 4 observations) is reasonably large given the relative simplicity of our model. We might consider running a straightforward Likelihood Ratio Test using `anova(restricted_model, full_model)` to compare our two models. This will assume that the difference in model deviances ( $-2 \\times \\text{LogLikelihood}$ ) is $\\chi^2$-distributed.  \nIf we wish to use a more robust test, we might use the `PBmodcomp()` function from the __pbkrtest__ package, in order to bootstrap the likelihood ratio statistic based on simulations based on the parameters of the model.  \n\n**Tip: For now, don't worry too much about \"singular fits\". We'll talk more about how we might deal with them next week!**  \n\n`r qend()`\n`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`\n\nThis is our null model:\n```{r}\nm.null <- lmer(WeightChange ~ 1 + (1 | ID), data=WeightMaintain3)\nsummary(m.null)\n```\nWe can see the `3.77 / (3.77 + 6.43)`, or `r (3.77 / (3.77 + 6.43)) %>% round(.,2)` of the total variance is attributable to participant-level variation. \n\nNow lets suppose we want to compare this null model with a model with an effect of `Assessment` (to assess whether there is overall change over time).\nWhich model should we compare `m.null` to?  \n```{r}\nmodA <- lmer(WeightChange ~ 1 + Assessment + (1 + Assessment | ID), data=WeightMaintain3)\nmodB <- lmer(WeightChange ~ 1 + Assessment + (1 | ID), data=WeightMaintain3)\n```\nA comparison between these `m.null` and `modA` will not be assessing the influence of _only_ the fixed effect of Assessment. Remember, we shouldn't compare models with different random effect structures.   \nHowever, `modB` doesn't include our by-participant random effects of assessment, so comparing this to `m.null` is potentially going to misattribute random deviations in participants' change to being an overall effect of assessment.  \n\nIf we want to conduct a model comparison to isolate the effect of overall change over time (a fixed effect of `Assessment`), we _might_ want to compare these two models:\n```{r}\nm.base0 <- lmer(WeightChange ~ 1 + (1 + Assessment | ID), data=WeightMaintain3)\nm.base <- lmer(WeightChange ~ 1 + Assessment + (1 + Assessment | ID), data=WeightMaintain3)\n```\nThe first of these models is a bit weird to think about - how can we have by-participant random deviations of `Assessment` if we don't have a fixed effect of `Assessment`? That makes very little sense. What it is actually fitting is a model where there is assumed to be __no overall effect__ of Assessment. So the fixed effect is 0. \n\n\n```{r}\n# Straightforward LRT\nanova(m.base0, m.base)\n```\n```{r eval=F}\n# parametric bootstrap LRT\nlibrary(pbkrtest)\nPBmodcomp(m.base, m.base0)\n```\n```{r echo=FALSE}\nload(\"data/02intromlm_pbmod.rdata\")\nres0$test\n```\n\n:::int\n\nParametric Bootstrap Likelihood Ratio test found that the inclusion of Assessment significantly improved model fit over the null model ( $\\chi^2(1)$ = `r round(res0$test$stat[2],2)`, `r ifelse(res0$test$p.value[2]<.001, \"p < .001\", paste0(\"p = \",round(res0$test$p.value[2], 3)))`), suggesting that participants' weights changed over course of 36 month assessment period. \n\n:::\n\n`r solend()`\n\n`r qbegin(\"C3\")`\n\n> Q: Did the experimental condition groups differ in overall weight change and rate of weight change (non-maintenance)?  \n\n*Hint:* It helps to break it down. There are two questions here:  \n\n  1. do groups differ overall?  \n  2. do groups differ over time?  \n\nWe can begin to see that we're asking two questions about the `Condition` variable here: \"is there an effect of Condition?\" and \"Is there an interaction between Assessment and Condition?\".  \n\nTry fitting two more models which incrementally build these levels of complexity, and compare them (perhaps to one another, perhaps to models from the previous question - think about what each comparison is testing!)  \n  \n`r qend()`\n`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`\n```{r}\nm.int <- lmer(WeightChange ~ Assessment + Condition + (Assessment | ID), \n              data=WeightMaintain3)\nm.full <- lmer(WeightChange ~ Assessment*Condition + (Assessment | ID), \n               data=WeightMaintain3)\n```\n\nWe're going to compare each model to the previous one to examine the improvement in fit due to inclusion of each parameter. \nWe could do this quickly with\n```{r}\nanova(m.base0, m.base, m.int, m.full)\n```\n:::int \nConditions differed overall in weight change $\\chi^2(2)=9.4, p = .009$  \nConditions differed in change over assessment period $\\chi^2(2)=40.4, p < .001$\n:::\n  \nHowever, we may instead want to bootstrap this test instead (especially if we have a small sample size):\n```{r eval=FALSE}\nPBmodcomp(m.int, m.base)\n```\n```{r echo=FALSE}\nres1$test\n```\n```{r eval=FALSE}\nPBmodcomp(m.full, m.int)\n```\n```{r echo=FALSE}\nres2$test\n```\n\n:::int \nConditions differed overall in weight change (bootstrap likelihood ratio = 9.4, $p = .014$ ).  \nConditions differed in change over assessment period (bootstrap likelihood ratio = 40.4, $p = .001$ ).  \n:::\n\n`r solend()`\n\n`r qbegin(\"C4\")`\nWe saw that we can get the coefficients using `fixef(model)`. \nWe can also use `tidy(model)`, and similar to models fitted with `lm()`, we can pull out the bit of the `summary()` using:  \n```{r eval=FALSE}\nsummary(model)$coefficients\n```\n\nFrom your model from the previous question which investigates whether conditions differed over in their rate of weight change, can you state how the conditions differed?  \n\n`r qend()`\n`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`\n\n```{r}\nsummary(m.full)$coefficients\n```\n\n:::int\nCompared to no intervention, weight (re)gain was 1.75 lbs/year slower for the ED intervention and 0.84 lbs/year slower for the MR intervention.\n:::\n\n`r solend()`\n\n`r qbegin(\"C5\")`\nMake a graph of the model fit *and* the observed data.  \n\n*Hint:* There are lots of ways you can do this, try a couple:  \n  \n  1. Using the **effects** package, does this help? `as.data.frame(effect(\"Assessment:Condition\", model))`  \n  2. Using `fitted(model)`\n  3. Using `augment()` from the **broom.mixed** package.  \n\n`r qend()`\n`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`\n\n1. Using the `effect()` function (and then adding the means and SEs from the original data):  \n```{r}\nef <- as.data.frame(effect(\"Assessment:Condition\", m.full))\n\nggplot(ef, aes(Assessment, fit, color=Condition)) + \n  geom_line() +\n  stat_summary(data=WeightMaintain3, aes(y=WeightChange), \n               fun.data=mean_se, geom=\"pointrange\", size=1) +\n  theme_bw()\n```\n\n2. Using the `fitted()` function to extract and plot fitted values from the model: \n\n```{r}\nggplot(WeightMaintain3, aes(Assessment, WeightChange, color=Condition)) + \n  stat_summary(fun.data=mean_se, geom=\"pointrange\", size=1) + \n  stat_summary(aes(y=fitted(m.full)), fun=mean, geom=\"line\") + \n  theme_bw()\n```\n\n3. Or using `augment()`:\n```{r}\naugment(m.full) %>%\nggplot(., aes(Assessment, WeightChange, color=Condition)) + \n  stat_summary(fun.data=mean_se, geom=\"pointrange\", size=1) + \n  stat_summary(aes(y=.fitted), fun=mean, geom=\"line\") + \n  theme_bw()\n```\n`r solend()`\n\n`r qbegin(\"C6\")`\nExamine the parameter estimates and interpret them (i.e., what does each parameter represent?)\n\n```{r eval=FALSE}\nm.full <- lmer(WeightChange ~ Assessment*Condition + (Assessment | ID), \n               data=WeightMaintain)\nsummary(m.full)\n```\n\n`r qend()`\n`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`\n```{r}\nround(coef(summary(m.full)), 3)\n```\n\n* `(Intercept)` ==> weight change at baseline in None group\n* `Assessment`  ==> slope of weight change in None group\n* `ConditionED` ==> baseline weight change in ED group relative to None group\n* `ConditionMR` ==> baseline weight change in MR group relative to None group\n* `Assessment:ConditionED`  ==> slope of weight change in ED group relative to None group\n* `Assessment:ConditionMR`  ==> slope of weight change in MR groups relative to None group\n\n`r solend()`\n\n\n\n<div class=\"tocify-extend-page\" data-unique=\"tocify-extend-page\" style=\"height: 0;\"></div>"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"include-in-header":["assets/toggling.html"],"number-sections":false,"output-file":"02_intromlm.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"0.9.587","toc_float":true,"theme":["united","assets/style-labs.scss"],"title":"Introducing Multilevel Models","link-citations":"yes","params":{"SHOW_SOLS":true,"TOGGLE":true}},"extensions":{"book":{"multiFile":true}}}}}