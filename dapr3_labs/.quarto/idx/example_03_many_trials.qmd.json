{"title":"Analysis Example 3: Many trials","markdown":{"yaml":{"title":"Analysis Example 3: Many trials","link-citations":"yes","code-fold":true,"params":{"SHOW_SOLS":true,"TOGGLE":true}},"headingText":"Overview","containsRefs":false,"markdown":"\n```{r setup, include=F}\nknitr::opts_chunk$set(message = F, warning = F, fig.align = 'center')\n```\n\n:::frame\n\nEach of these pages provides an analysis run through for a different type of design. Each document is structured in the same way:  \n\n  - First the data and research context is introduced. For the purpose of these tutorials, we will only use examples where the data can be shared - either because it is from an open access publication, or because it is unpublished or simulated. \n  - Second, we go through any tidying of the data that is required, before creating some brief descriptives and visualizations of the raw data.\n  - Then, we conduct an analysis. Where possible, we translate the research questions into formal equations prior to fitting the models in **lme4**. Model comparisons are conducted, along with checks of distributional assumptions on our model residuals. \n  - Finally, we visualize and interpret our analysis.\n  \nPlease note that there will be only minimal explanation of the steps undertaken here, as these pages are intended as example analyses rather than additional labs readings. Please also be aware that there are many decisions to be made throughout conducting analyses, and it may be the case that you disagree with some of the choices we make here. As always with these things, it is how we justify our choices that is important. We warmly welcome any feedback and suggestions to improve these examples: please email [ug.ppls.stats@ed.ac.uk](mailto:ug.ppls.stats@ed.ac.uk). \n\n:::\n\nThis data comes from an undergraduate dissertation student. She ran an experiment looking at the way people's perception of the size of models influences the price they are willing to pay for products. Participants saw a series of pictures of a number of items of clothing. The images had been manipulated so that (a) all pictures were of the same model, and (b) the size of the model differed from a 6 to 16. In total participants saw 54 images. During the study, each picture was presented to participants with a sliding scale from 0 to 100 underneath. Participants simply had to drag the cursor to the appropriate point on the slide to indicate how much they would pay for the garment.\n\nThis data was collected using Qualtrics. The resultant output was a wide format data set where each participant (n=120) is a row and each item (n=54) is a column. Along with each of these questions were a series of demographic variables, and two short survey measures assessing participants attitude to thinness.\n\nThe main ideas we were interested in looking at were whether: \n\n(i) participants would pay more for garments on thinner models\n(ii) participants would pay more for items when the model size matched their actual size\n(iii) participants would pay more for items when the model size matched their ideal size\n(iv) the extent to which participants idealize thin figures would moderate (ii)\n\n\n# Data Wrangling\nUnlike some of our examples, there was some fairly serious data cleaning needed with this data set. So let's work through it.  \n\nThe data is available at [https://uoepsy.github.io/data/data_HA.csv](https://uoepsy.github.io/data/data_HA.csv)  \n\n```{r warning=FALSE, message=FALSE}\nlibrary(tidyverse)\ndf <- read_csv(\"https://uoepsy.github.io/data/data_HA.csv\")\nhead(df)\n```\n\nFirst things first, let's use a handy package to change all our variable names to a nice easy \"snake_case\":\n\n```{r}\nlibrary(janitor)\ndf <- clean_names(df)\nhead(df)\n```\n\nOur next job is to cut out a few variables that we will not work with in this example. These are a set of questions asking about clothing preferences. They all end in `p` and appear at the end of the data set.\n\n```{r}\ndf1 <- \n  df %>%\n  select(-ends_with(\"p\"))\n```\n\nNow we want to create scores for the two surveys scored using Likert-type scales. We're going to take the means of these scales as our scores:\n\n```{r}\n# TI score\ndf1 <- \n  df1 %>%\n  select(contains(\"_tii\")) %>%\n  rowMeans(., na.rm=T) %>%\n  bind_cols(df1, tii_score = .)\n         \n# MA score\ndf1 <- \n  df1 %>%\n  select(contains(\"_mo\")) %>%\n  rowMeans(., na.rm=T) %>%\n  bind_cols(df1, ma_score = .)\n```\n\nNext, we need to make some changes to the coding of current and ideal size\n\n```{r}\ndf1 <- \n  df1 %>%\n  mutate(\n    c.size = recode(current_size, 6, 8, 10, 12, 14, 16),\n    i.size = recode(ideal_size,  6, 8, 10, 12, 14, 16)\n  )\n```\n\nAlways sensible to check our changes:\n\n```{r}\ndf1 %>%\n  select(current_size, ideal_size, c.size, i.size)\n```\n\nExcellent, that has worked.\n\nOur next step (and this one is not strictly necessary) is that we are going to aggregate over the different types of top, bottoms and dresses. We could treat each individual garment of clothing as exactly that, but in this instance it was decided that this was not of interest, and to simplify the models, we would create scores for each broad category by size.\n\n```{r}\ndf1 <- \n  df1 %>%\n  mutate(top_S6 = rowMeans(.[names(df1)[grepl(\"top_6\",names(df1))]]),\n         top_S8 = rowMeans(.[names(df1)[grepl(\"top_8\",names(df1))]]),\n         top_S10 = rowMeans(.[names(df1)[grepl(\"top_10\",names(df1))]]),\n         top_S12 = rowMeans(.[names(df1)[grepl(\"top_12\",names(df1))]]),\n         top_S14 = rowMeans(.[names(df1)[grepl(\"top_14\",names(df1))]]),\n         top_S16 = rowMeans(.[names(df1)[grepl(\"top_16\",names(df1))]]),\n         bottom_S6 = rowMeans(.[names(df1)[grepl(\"bottom_6\",names(df1))]]),\n         bottom_S8 = rowMeans(.[names(df1)[grepl(\"bottom_8\",names(df1))]]),\n         bottom_S10 = rowMeans(.[names(df1)[grepl(\"bottom_10\",names(df1))]]),\n         bottom_S12 = rowMeans(.[names(df1)[grepl(\"bottom_12\",names(df1))]]),\n         bottom_S14 = rowMeans(.[names(df1)[grepl(\"bottom_14\",names(df1))]]),\n         bottom_S16 = rowMeans(.[names(df1)[grepl(\"bottom_16\",names(df1))]]),\n         dress_S6 = rowMeans(.[names(df1)[grepl(\"dress_6\",names(df1))]]),\n         dress_S8 = rowMeans(.[names(df1)[grepl(\"dress_8\",names(df1))]]),\n         dress_S10 = rowMeans(.[names(df1)[grepl(\"dress_10\",names(df1))]]),\n         dress_S12 = rowMeans(.[names(df1)[grepl(\"dress_12\",names(df1))]]),\n         dress_S14 = rowMeans(.[names(df1)[grepl(\"dress_14\",names(df1))]]),\n         dress_S16 = rowMeans(.[names(df1)[grepl(\"dress_16\",names(df1))]]),\n         )\n```\n\nAt this point, our next big step is to make the data long. But I am also going to make this a little more manageable by trimming out the variables we do not need. We want ID and age, gender is constant (all female sample), so we do not need this, and then we want the variables we have just created.\n\n```{r}\ndf2 <- \n  df1 %>%\n  select(response_id, age, 99:120)\n\ndf2\n```\n\nOK, now we need to get the data from wide to long format.\n\n```{r}\ndf_long <- \n  df2 %>%\n  pivot_longer(top_S6:dress_S16, names_to = \"garment\",values_to = \"price\")\n\ndf_long\n```\n\nThis looks good, but we now need to have variables that code for size and item type.\n\n```{r}\ndf_analysis <- \n  df_long %>%\n  separate(garment, c(\"item\", \"size\"), \"_S\")\n\n```\n\nAnd check....\n\n```{r}\ndf_analysis\n```\n\nFinally, our last couple of steps. First, we want to calculate a couple of binary variables that code whether a give item being rated matches a participants actual or ideal size; second, we need to make our item variable a factor, and third, let's standardize our scale scores for idealization of thinness. \n\n\n```{r}\ndf_analysis <- \n  df_analysis %>%\n  mutate(\n    c.match = factor(if_else(c.size == size, 1, 0)),\n    i.match = factor(if_else(i.size == size, 1, 0)),\n    sizefactor = factor(size, levels=c(\"6\",\"8\",\"10\",\"12\",\"14\",\"16\")),\n    size = scale(as.numeric(as.character(size))),\n    item = as.factor(item),\n    id = response_id,\n    tii_scorez = scale(tii_score),\n    ma_scorez = scale(ma_score)\n  )\n\ndf_analysis[,c(1,5:11)]\n```\n:::imp\nThere's a debate to be had about whether we should consider our `size` variable to be numeric or a factor. It could be argued that the sizes of clothing are distinct categories, and that the scale might not be regular (e.g. size 10 is not the same amount bigger than size 8 as size 8 is from size 6). On the other hand, clothing sizes can also be considered points on an underlying latent continuous variable, which might lead you to want to treat it as numeric. \nPersonally, I would want to know exactly how the participants were presented with the sizes - if they were shown the images and the size of the garment was made explicit for each item, then I would be inclined to consider them distinct categories. However, if participants were not explicitly aware of the size of each item, and it was only the size of the model they saw that varied in their size, I am tempted to treat it numerically. \n\n:::\n\n\n# Descriptives\nLet's look at the average price paid by item type and size:\n\n```{r}\ndf_analysis %>%\n  group_by(size, item) %>%\n  summarize(\n    price = mean(price, na.rm=T)\n  ) %>%\n  arrange(item)\n```\n\nThis looks a lot like we are seeing difference, averaged across all participants, in the price they would pay for different types of garment, but not a lot of difference by size.\n\nWe can also calculate the ICC's\n```{r}\nlibrary(lme4)\nm0 <- lmer(price ~ 1 + \n             (1|id) + (1|item),\n           data = df_analysis)\nICC <- as.data.frame(VarCorr(m0))\n```\n\nFor participant:\n\n```{r}\nround((ICC[1,4]/sum(ICC[,4]))*100, 2)\n```\n\nAnd item:\n\n```{r}\nround((ICC[2,4]/sum(ICC[,4]))*100, 2)\n```\n\nSo we can see we have a lot of between person variation, and some between item variation in our data. This suggests that there is potential value in our level 2 predictors concerning both the items and between person characteristics.\n\n# Visualizations\n\nThere are too many ways to visualize this data! Here are just a few:\n\n```{r}\nggplot(df_analysis, aes(x=c.size, y=price,col=sizefactor))+\n  stat_summary(geom=\"pointrange\")+\n  stat_summary(geom=\"path\")+\n  facet_grid(~item)+\n  labs(x=\"actual size\",y=\"price would pay\")\n\nggplot(df_analysis, aes(x=i.size, y=price,col=sizefactor))+\n  stat_summary(geom=\"pointrange\")+\n  stat_summary(geom=\"path\")+\n  facet_grid(~item)+\n  labs(x=\"ideal size\",y=\"price would pay\")\n```\n\nRemember, however, that we had some research questions to consider! \n\n(i) participants would pay more for garments on thinner models\n```{r}\nggplot(df_analysis, aes(x=sizefactor, y=price))+\n  geom_violin()+\n  labs(x=\"item size\",y=\"price would pay\")\n```\n\n(ii) participants would pay more for items when the model size matched their actual size\n```{r}\nggplot(df_analysis, aes(x=factor(c.match), y=price))+\n  geom_violin()+\n  labs(x=\"item size matches actual size\",y=\"price would pay\")\n```\n\n(iii) participants would pay more for items when the model size matched their ideal size\n```{r}\nggplot(df_analysis, aes(x=factor(i.match), y=price))+\n  geom_violin()+\n  labs(x=\"item size matches ideal size\",y=\"price would pay\")\n```\n\n(iv) the extent to which participants idealize thin figures would moderate (ii)\n```{r}\nggplot(df_analysis, aes(x=tii_scorez, y=price))+\n  stat_summary(geom=\"pointrange\",aes(group=id))+ # want a mean per participant, rather than each individual point\n  facet_grid(~c.match)\n  labs(x=\"thinness idealization score\",y=\"price would pay\")\n```\n\n\n# Analysis\n## Equations\n\n:::imp\n\nWhy `item` as a fixed effect and not by-item random intercepts (e.g.`(1 | item)`)? It is debatable how you decide to treat item here. It could be argued that the different item types (dress/top/bottom, etc) represent a sample from some broader population of garment types, and as such should be modeled as random effects (especially given that we are not interested in specific parameter estimates for differences between item types).  \n\nHowever, we only have 3 different types of item, and it is important to remember that having `(1|item)` will involve estimating variance components based on these. Variance estimates will be less stable with such a small number of groups. There's no hard rule to follow here about \"how many groups is enough\" (some people suggest 5 or 6 at least), but personally I would be inclined to use item as a fixed effect. \n\nWe should also consider the possibility that certain items should be less desirable to purchase when in a smaller/bigger size. It may be that size differences are more salient, or more influential on our outcome variable, for certain types of item over others. This would involve adding the interaction between size and item type\n\n:::  \n\n\n$$\n\\begin{aligned}\n  \\operatorname{price}_{i[j]}  =& \\beta_{0i} + \n  \\beta_{1i}(\\operatorname{item-size}_j) + \n  \\beta_{1}(\\operatorname{item-type}_j) + \\\\\n  & \\beta_{2}(\\operatorname{item-size}_j \\times \\operatorname{item-type}_j) + \\\\\n  & \\beta_{3i}(\\operatorname{matches-actual-size}_j) + \\\\\n  & \\beta_{4}(\\operatorname{matches-ideal-size}_j) + \\varepsilon_{i[j]}\\\\\n  \\qquad \\\\\n  \n  \\beta_{0i} &= \\gamma_{00} + \\gamma_{01}(\\operatorname{thin-idealisation-score}_i) + \\zeta_{0i} \\\\\n  \\beta_{1i} &= \\gamma_{10} + \\zeta_{1i}\\\\\n  \\beta_{3i} &= \\gamma_{30} + \\gamma_{31}(\\operatorname{thin-idealisation-score}_i)\\\\\n  & \\text{for participant i = 1, } \\dots \\text{, I} \\\\\n\\end{aligned}\n$$\n\n## Fitting the models\n\nWe're going to want to do lots of model comparisons, and for those we need all our models to be fitted on the same data. We're going to use these variables:\n\n\n```{r}\ndf_analysis <-\n  df_analysis %>%\n  filter(\n    !is.na(size),\n    !is.na(item),\n    !is.na(c.match),\n    !is.na(i.match),\n    !is.na(tii_scorez),\n    !is.na(id),\n    !is.na(price)\n  )\n```\n\n\n\n\nFirst, the effect of size. We're going to treat size as a numeric variable here, in part because it makes our models less complex. \nIt also allows us to model by-participant random effects of size (you can think of this as modeling participants as varying in the amount to which size influences the amount that they are prepared to pay).  \n\n```{r}\nm0 <- lmer(price ~ 1 + item + \n             (1+size|id),\n           data = df_analysis)\nm1 <- lmer(price ~ 1 + item + size +\n             (1 + size|id),\n           data = df_analysis)\nsummary(m1)\n```\n\n```{r}\nanova(m0, m1)\n```\n\nThe interaction between size and item:\n\n```{r}\nm2 <- lmer(price ~ 1 +  item * size +\n             (1+size|id),\n           data = df_analysis)\nsummary(m2)\n```\n```{r}\nanova(m1,m2)\n```\n\n\nWhat about the effect of item size matching your current size:\n\n```{r}\nm3 <- lmer(price ~ 1 +  item * size + c.match +\n             (1+size|id),\n           data = df_analysis)\nsummary(m3)\n```\n\nCompare models for current size match:\n\n```{r}\nanova(m2,m3)\n```\n\nOr your ideal size:\n\n```{r}\nm4 <- lmer(price ~ 1 + item * size + c.match + i.match +\n             (1+size|id),\n           data = df_analysis)\nsummary(m4)\n```\n\nCompare models for ideal size match:\n\n```{r}\nanova(m3,m4)\n```\n\nFixed effects for thin ideals:\n\n```{r}\nm5 <- lmer(price ~ 1 + item * size + c.match + i.match + tii_scorez + \n             (1+size|id),\n           data = df_analysis)\nsummary(m5)\n```\n\nCompare models for thin ideal:\n\n```{r}\nanova(m4,m5)\n```\n\nDo they interact?\n\n```{r}\nm6 <- lmer(price ~ 1 + item * size + c.match + i.match + tii_scorez + c.match*tii_scorez + \n             (1+size|id),\n           data = df_analysis)\nsummary(m6)\n```\n\nAnd let's just compare all at once, just for fun:\n\n```{r}\nanova(m0,m1,m2,m3,m4,m5,m6)\n```\n\n## Check model(s)\n\n```{r}\nlibrary(lattice)\nlibrary(gridExtra)\ngrid.arrange(\n  plot(m1, sqrt(abs(resid(.)))~fitted(.), type = c(\"p\",\"smooth\")),\n  plot(m2, sqrt(abs(resid(.)))~fitted(.), type = c(\"p\",\"smooth\")),\n  plot(m3, sqrt(abs(resid(.)))~fitted(.), type = c(\"p\",\"smooth\")),\n  plot(m4, sqrt(abs(resid(.)))~fitted(.), type = c(\"p\",\"smooth\")),\n  plot(m5, sqrt(abs(resid(.)))~fitted(.), type = c(\"p\",\"smooth\")),\n  plot(m6, sqrt(abs(resid(.)))~fitted(.), type = c(\"p\",\"smooth\")),\n  ncol=3\n)\ngrid.arrange(\n  qqmath(m1),\n  qqmath(m2),\n  qqmath(m3),\n  qqmath(m4),\n  qqmath(m5),\n  qqmath(m6),\n  ncol=3\n)\n```\n\nI might be a little concerned about our assumptions here. The QQplots look a little off in the tails, however, the histograms of residuals make it look okay:\n\n```{r echo=FALSE}\npar(mfrow=c(2,3))\nhist(resid(m1))\nhist(resid(m2))\nhist(resid(m3))\nhist(resid(m4))\nhist(resid(m5))\nhist(resid(m6))\npar(mfrow=c(1,1))\n```\n\nFor peace of mind, we could re-do the model comparisons with parametric bootstrapped model comparison for more reliable conclusions. This _will_ assume that the model specified distribution of residuals ($\\varepsilon \\sim N(0, \\sigma_\\varepsilon)$) holds in the population\n\n```{r echo=FALSE,eval=FALSE}\nlibrary(pbkrtest)\nres1 <- PBmodcomp(m1,m0)\nres2 <- PBmodcomp(m2,m1)\nres3 <- PBmodcomp(m3,m2)\nres4 <- PBmodcomp(m4,m3)\nres5 <- PBmodcomp(m5,m4)\nres6 <- PBmodcomp(m6,m5)\nsave(res1,res2,res3,res4,res5,res6,file=\"pbres.rdata\")\n```\n```{r eval=F}\nlibrary(pbkrtest)\nPBmodcomp(m1, m0)\n```\n```{r echo=F}\nlibrary(pbkrtest)\nload(\"data/pbres.rdata\")\nres1$test\n```\n\n```{r eval=F}\nPBmodcomp(m2, m1)\n```\n```{r echo=F}\nres2$test\n```\n\n```{r eval=F}\nPBmodcomp(m3, m2)\n```\n```{r echo=F}\nres3$test\n```\n\n```{r eval=F}\nPBmodcomp(m4, m3)\n```\n```{r echo=F}\nres4$test\n```\n\n```{r eval=F}\nPBmodcomp(m5, m4)\n```\n```{r echo=F}\nres5$test\n```\n\n```{r eval=F}\nPBmodcomp(m6, m5)\n```\n```{r echo=F}\nres6$test\n```\n\n\n\n\n\n# Visualise model(s)\n\n```{r}\nsjPlot::plot_model(m6)\n```\n\n\n```{r}\ndotplot.ranef.mer(ranef(m6))\n```\n\n```{r}\nlibrary(sjPlot)\nplot_model(m6, type = \"pred\")$size\nplot_model(m6, type = \"pred\")$c.match\nplot_model(m6, type = \"pred\")$i.match\nplot_model(m6, type = \"pred\", terms = c(\"c.match\",\"tii_scorez [-1,0,1]\")) +\n   geom_path()\n```\n\n\n# Interpret model(s)\n\n:::int\n\nThe amount that participants indicated they would pay for a garment was modeled using multi-level linear regression models, with by-participant random intercepts and effects of garment size. After adjusting for effects on our outcome due to the garment-type (dress/top/bottom), inclusion of garment size as a fixed predictor was found to improve model fit (Parametric Bootstrap Likelihood Ratio = `r round(res1$test[2,1],2)`, p = `r round(res1$test[2,3],3)`). The effect of garment-size was found to differ between garment-types (inclusion of interaction term LRT `r round(res2$test[2,1],2)`, p <.001). After controlling for garment-type, -size and their interaction, neither the garments' matching participants' actual or ideal size, nor the extent to which participants idealized thin figures were found to predict the price they would pay, and the predicted interaction between actual-size matching and idealization of thin figures was not evidenced. Results of the full model are shown in Table 1. \n\n:::\n\n```{r}\ntab_model(m6, show.p = F, title=\"Table 1: Model results. Please note that 95% CIs are not bootstrapped\")\n```\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"include-in-header":["assets/toggling.html"],"number-sections":false,"output-file":"example_03_many_trials.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"0.9.587","toc_float":true,"theme":["united","assets/style-labs.scss"],"code-copy":false,"title":"Analysis Example 3: Many trials","link-citations":"yes","params":{"SHOW_SOLS":true,"TOGGLE":true}},"extensions":{"book":{"multiFile":true}}}}}