---
title: "Assumptions, Diagnostics, and Random Effect Structures"
link-citations: yes
params: 
    SHOW_SOLS: TRUE
    TOGGLE: TRUE
---

```{r setup, include=FALSE}
source('assets/setup.R')
library(tidyverse)
library(patchwork)
library(effects)
library(knitr)
library(kableExtra)
```


:::lo
**Preliminaries**  
 
1. Create a new RMarkdown document or R script (whichever you like) for this week. 

:::

# Exercises

## Assumptions

For these next set of exercises we will return to our study from Week 1, in which researchers want to study the relationship between time spent outdoors and mental wellbeing, across all of Scotland. Data is collected from 20 of the Local Authority Areas and is accessible at [https://uoepsy.github.io/data/LAAwellbeing.csv](https://uoepsy.github.io/data/LAAwellbeing.csv).  
```{r echo=FALSE, message=FALSE,warning=FALSE}
library(gt)
scotmw <- read_csv("https://uoepsy.github.io/data/LAAwellbeing.csv")
tibble(variable=names(scotmw),
       description=c("Participant ID","Participant Name","Local Authority Area","Self report estimated number of hours per week spent outdoors","Warwick-Edinburgh Mental Wellbeing Scale (WEMWBS), a self-report measure of mental health and well-being. The scale is scored by summing responses to each item, with items answered on a 1 to 5 Likert scale. The minimum scale score is 14 and the maximum is 70.","LAA Population Density (people per square km)")
) %>% gt()
```


`r qbegin("1")`
The code below will read in the data and fit the model with by-LAA random intercepts and slopes of outdoor time. 
```{r message=F,warning=F}
library(tidyverse)
library(lme4)
scotmw <- read_csv("https://uoepsy.github.io/data/LAAwellbeing.csv")
rs_model <- lmer(wellbeing ~ 1 + outdoor_time + (1 + outdoor_time | laa), data = scotmw)
```

1. Plot the residuals vs fitted model, and assess the extend to which the assumption holds that the residuals are zero mean.
2. Construct a scale-location plot. This is where the square-root of the absolute value of the standardised residuals is plotted against the fitted values, and allows you to more easily assess the assumption of constant variance. 
  - Optional: can you create the same plot using ggplot, starting with the `augment()` function from the __broom.mixed__ package?  

`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`
```{r}
plot(rs_model, type=c("p","smooth"))
```
As we can see, the mean value of the residuals is quite close to zero, right the way across the fitted values. This is good. 

```{r}
plot(rs_model,
     form = sqrt(abs(resid(.))) ~ fitted(.),
     type = c("p","smooth"))
```

In this plot we can see that the variance of the residuals is fairly constant across the fitted values. There is a slight dip at the lower end. We can see this in the previous plot too - all the points at the LHS of the plot are slightly more tightly grouped around the line. This is not enough to worry me, personally.  

```{r}
library(broom.mixed)
augment(rs_model) %>%
  mutate(
    sqrtr = sqrt(abs(.resid))
  ) %>%
  ggplot(aes(x=.fitted, y=sqrtr)) + 
  geom_point() +
  geom_smooth()
```

`r solend()`


`r qbegin("2")`
Examine the normality of both the level 1 and level 2 residuals. 
`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

__Level 1__  

```{r}
hist(resid(rs_model))
library(lattice)
qqmath(rs_model, id=0.05)
```
__Level 2__  
```{r}
qqmath(ranef(rs_model))
hist(ranef(rs_model)$laa[,1])
hist(ranef(rs_model)$laa[,2])
```

The normality of the residuals at both levels looks pretty decent here. This is especially good given that we only actually have 20 clusters (the LAAs). We have quite a small sample at this level.  

`r solend()`

## Diagnostics

`r qbegin("3")`
1. Which person in the dataset has the greatest influence on our model?  
2. For which person is the model fit the worst (i.e., who has the highest residual?)
3. Which _LAA_ has the greatest influence on our model?  

**Hint:** as well as `hlm_influence()` in the __HLMdiag__ package there is another nice function, `hlm_augment()`

:::imp
We can often end up in confusion because the $i^{th}$ observation inputted to our model (and therefore the $i^{th}$ observation of `hlm_influence()` output) **might not be** the $i^{th}$ observation in our original dataset - there may be missing data! 
:::

(Luckily, we have no missing data in this dataset). 
`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`
```{r}
library(HLMdiag)
l1_inf <- hlm_influence(rs_model,level=1)
dotplot_diag(l1_inf$cooksd, cutoff="internal")+
  ylim(0,.15)
```
Greatest influence:
```{r}
hlm_augment(rs_model, level=1) %>% arrange(desc(cooksd))
scotmw[74, ]
```
```{r}
#| echo: false
#| out-width: "100px"
#| fig-align: "center"
knitr::include_graphics("images/intro/willie.jpg")
```

Highest residual: 
```{r}
hlm_augment(rs_model, level=1) %>% arrange(desc(abs(.resid)))
scotmw[64, ]
```

Most influential LAA: 
```{r}
hlm_augment(rs_model, level="laa") %>% arrange(desc(cooksd))
```

`r solend()`


`r qbegin("4")`
1. Looking at the random effects, which LAA shows the least improvement in wellbeing as outdoor time increases, and which shows the greatest improvement?  
2. What is the estimated wellbeing for people from City of Edinburgh with zero hours of outdoor time per week, and what is their associated increases in wellbeing for every hour per week increase in outdoor time?  
`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`
It looks like the residents of Glasgow City have the least improvement, and the Western Isles (Na h-Eileanan Siar) show the most increases of wellbeing with outdoor time. We can see this from the LAA-random slopes of outdoor time:  
```{r}
ranef(rs_model)
```
We can get the cluster-specific coefficients either by adding the `fixef()` and `ranef()` together, or using `coef()`:  
```{r}
coef(rs_model)
```
```{r}
coef(rs_model)$laa["City of Edinburgh",]
```
`r solend()`


# Random Effect Structures

Random effect structures can get pretty complicated quite quickly.  
Very often it is not the random effects part that is of specific interest to us, but we wish to estimate random effects in order to more accurately partition up the variance in our outcome variable and provide better estimates of fixed effects.  

It is a fine balance between fitting the most sophisticated model structure that we possibly can, and fitting a model that converges without too much simplification.  

Typically for many research designs, the following steps will keep you mostly on track to finding the maximal model:  

`lmer(outcome ~ fixed effects + (random effects | grouping structure))`  

1. Specify the `outcome ~ fixed effects` bit first. 
    - The outcome variable should be clear: it is the variable we are wishing to explain/predict. 
    - The fixed effects are the things we want to use to explain/predict variation in the outcome variable. These will often be the things that are of specific inferential interest, and other covariates. Just like the simple linear model.  
2. If there is a grouping structure to your data, and those groups (preferably n>5) are perceived as a random sample of a wider population (the specific groups aren't interesting to you), then consider fitting them in the random effects part `(1 | grouping)`.  
3. If any of the things in the fixed effects vary within the groups, it might be possible to also include them as random effects.  
    - as a general rule, don't specify random effects that are not also specified as fixed effects (an exception could be specifically for model comparison, to isolate the contribution of the fixed effect).  
  
For things that do not vary within the groups, it rarely makes sense to include them as random effects. For instance if we had a model with `lmer(score ~ genetic_status + (1 + genetic_status | participant))` then we would be trying to model a process where "the effect of genetic_status on score is different for each participant". But if you consider an individual participant, their genetic status never changes. For participant $i$, what is "the effect of genetic status on score"? It's undefined. This is because genetic status only varies _between_ participants.  

<!-- `r optbegin("An example", olabel=F)` -->
<!-- Suppose we were also interested in the association between population density and wellbeing. Our data contains information on the population density for each LAA. Note that for all people in our data that are from the same LAA, they will have the same value in the `density` variable, because this is measured at the LAA level, not the person-level:   -->
<!-- ```{r} -->
<!-- scotmw %>%  -->
<!--   select(laa, density) -->
<!-- ``` -->

<!-- It doesn't really make sense to have random effects of density by LAA (the `density | laa` bit), because the association `wellbeing ~ density` is the same for _every_ person in that LAA. To say that "each LAA has a different effect of population density on wellbeing" is tricky, because we "effect of density on wellbeing" isn't really defined for an individual LAA.  -->
<!-- ```{r} -->
<!-- #| error: true -->
<!-- #| message: true -->
<!-- model_dens <- lmer(wellbeing ~ 1 + outdoor_time + density + -->
<!--                    (1 + outdoor_time + density | laa), data = scotmw) -->
<!-- ``` -->
<!-- The resulting model gives a singular fit, and we can see how this impacts the model estimates in the random effects. The random effect of `density | laa` is much smaller (explaining less variance), and is very highly correlated to the random intercept `1 | laa`, because it doesn't really contain a great deal more information (if you think about the `laa` and `density` columns of the dataset, there is a one-to-one mapping between them). Including the `density | laa` random effect here is not supported by the data.   -->
<!-- ```{r} -->
<!-- VarCorr(model_dens) -->
<!-- ``` -->
<!-- `r optend()` -->

:::rtip
__Random Effects in lme4__  

Below are a selection of different formulas for specifying different random effect structures, taken from the [lme4 vignette](https://cran.r-project.org/web/packages/lme4/vignettes/lmer.pdf). This might look like a lot, but over time and repeated use of multilevel models you will get used to reading these in a similar way to getting used to reading the formula structure of `y ~ x1 + x2` in all our linear models. 
<br>

|  Formula|  Alternative|  Meaning|
|--------:|------------:|--------:|
|  $\text{(1 | g)}$|  $\text{1 + (1 | g)}$|  Random intercept with fixed mean|
|  $\text{(1 | g1/g2)}$|  $\text{(1 | g1) + (1 | g1:g2)}$|  Intercept varying among $g1$ and $g2$ within $g1$|
|  $\text{(1 | g1) + (1 | g2)}$|  $\text{1 + (1 | g1) + (1 | g2)}$|  Intercept varying among $g1$ and $g2$|
|  $\text{x + (x | g)}$|  $\text{1 + x + (1 + x | g)}$|  Correlated random intercept and slope|
|  $\text{x + (x || g)}$|  $\text{1 + x + (x | g) + (0 + x | g)}$|  Uncorrelated random intercept and slope|
  
**Table 1:** Examples of the right-hand-sides of mixed effects model formulas. $g$, $g1$, $g2$ are grouping factors, $x$ is a predictor variable.

:::


# Convergence Issues and What To Do

## Singular fits

You may have noticed that some of our models over the last few weeks have been giving a warning: `boundary (singular) fit: see ?isSingular`.   
Up to now, we've been largely ignoring these warnings. However, this week we're going to look at how to deal with this issue.

<p style="color:red">boundary (singular) fit: see ?isSingular</p>

The warning is telling us that our model has resulted in a 'singular fit'. Singular fits often indicate that the model is 'overfitted' - that is, the random effects structure which we have specified is too complex to be supported by the data.  

Perhaps the most intuitive advice would be remove the most complex part of the random effects structure (i.e. random slopes). This leads to a simpler model that is not over-fitted. In other words, start simplying from the top (where the most complexity is) to the bottom (where the lowest complexity is).
Additionally, when variance estimates are very low for a specific random effect term, this indicates that the model is not estimating this parameter to differ much between the levels of your grouping variable. It might, in some experimental designs, be perfectly acceptable to remove this or simply include it as a fixed effect.

A key point here is that when fitting a mixed model, we should think about how the data are generated. Asking yourself questions such as "do we have good reason to assume subjects might vary over time, or to assume that they will have different starting points (i.e., different intercepts)?" can help you in specifying your random effect structure

You can read in depth about what this means by reading the help documentation for `?isSingular`. For our purposes, a relevant section is copied below:  

*... intercept-only models, or 2-dimensional random effects such as intercept + slope models, singularity is relatively easy to detect because it leads to random-effect variance estimates of (nearly) zero, or estimates of correlations that are (almost) exactly -1 or 1.*

## Convergence warnings  

Issues of non-convergence can be caused by many things. If you're model doesn't converge, it does *not necessarily* mean the fit is incorrect, however it is **is cause for concern**, and should be addressed, else you may end up reporting inferences which do not hold.

There are lots of different things which you could do which *might* help your model to converge. A select few are detailed below:  

- double-check the model specification and the data  

- adjust stopping (convergence) tolerances for the nonlinear optimizer, using the optCtrl argument to [g]lmerControl. (see `?convergence` for convergence controls). 
    - What is "tolerance"? Remember that our optimizer is the the method by which the computer finds the best fitting model, by iteratively assessing and trying to maximise the likelihood (or minimise the loss). 

```{r}
#| label: fig-tolerance 
#| echo: false
#| fig-cap: "An optimizer will stop after a certain number of iterations, or when it meets a tolerance threshold"
knitr::include_graphics("images/tolerance.png")
```

- center and scale continuous predictor variables (e.g. with `scale`)  

- Change the optimization method (for example, here we change it to `bobyqa`):
    `lmer(..., control = lmerControl(optimizer="bobyqa"))`  
    `glmer(..., control = glmerControl(optimizer="bobyqa"))`  

- Increase the number of optimization steps:
    `lmer(..., control = lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=50000))`  
    `glmer(..., control = glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=50000))`  

- Use `allFit()` to try the fit with all available optimizers. This will of course be slow, but is considered 'the gold standard'; *"if all optimizers converge to values that are practically equivalent, then we would consider the convergence warnings to be false positives."*  

- Consider simplifying your model, for example by removing random effects with the smallest variance (but be careful to not simplify more than necessary, and ensure that your write up details these changes)


# Exercises

## Crossed Ranefs

:::frame
__Data: Test-enhanced learning__  

An experiment was run to conceptually replicate "test-enhanced learning" (Roediger & Karpicke, 2006): two groups of 25 participants were presented with material to learn. One group studied the material twice (`StudyStudy`), the other group studied the material once then did a test (`StudyTest`). Recall was tested immediately (one minute) after the learning session and one week later. The recall tests were composed of 175 items identified by a keyword (`Test_word`). One of the researchers' questions concerned how test-enhanced learning influences time-to-recall. 

The critical (replication) prediction is that the `StudyStudy` group should perform somewhat better on the immediate recall test, but the `StudyTest` group will retain the material better and thus perform better on the 1-week follow-up test.  

```{r echo=FALSE}
load(url("https://uoepsy.github.io/data/testenhancedlearning.RData"))
tibble(
  variable=names(tel),
  description=c("Unique Participant Identifier", "Group denoting whether the participant studied the material twice (StudyStudy), or studied it once then did a test (StudyTest)","Time of recall test ('min' = Immediate, 'week' = One week later)","Word being recalled (175 different test words)","Whether or not the word was correctly recalled","Time to recall word (milliseconds)")
) %>% knitr::kable()
```

The following code loads the data into your R environment by creating a variable called `tel`:
```{r}
load(url("https://uoepsy.github.io/data/testenhancedlearning.RData"))
```

:::


`r qbegin("5")`
Load and plot the data.  
For this week, we'll use Reaction Time as our proxy for the test performance, so you'll probably want that variable on the y-axis.  

Does it look like the effect was replicated?
`r qend()` 
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`
```{r}
load(url("https://uoepsy.github.io/data/testenhancedlearning.RData"))
```
You can make use of `stat_summary()`! 
```{r, eval=FALSE}
ggplot(tel, aes(Delay, Rtime, col=Group)) + 
  stat_summary(fun.data=mean_se, geom="pointrange")+
  theme_light()
```
It's more work, but some people might rather calculate the numbers and then plot them directly. It does just the same thing: 
```{r}
tel %>% 
  group_by(Delay, Group) %>%
  summarise(
    mean = mean(Rtime),
    se = sd(Rtime)/sqrt(n())
  ) %>%
  ggplot(., aes(x=Delay, col = Group)) +
  geom_pointrange(aes(y=mean, ymin=mean-se, ymax=mean+se))+
  theme_light() +
  labs(y = "Response Time (ms)")
```
  
That looks like test-enhanced learning to me!  
`r solend()` 

`r qbegin("6")`
> The critical (replication) prediction is that the `StudyStudy` group should perform somewhat better on the immediate recall test, but the `StudyTest` group will retain the material better and thus perform better on the 1-week follow-up test.  

Test the critical hypothesis using a multi-level model.  
Try to fit the maximally complex random effect structure that is supported by the experimental design.  

**Hint:** We can expect variability across subjects (some people are better at learning than others) __and__ across items (some of the recall items are harder than others). How should this be represented in the random effects?

_If a model takes ages to fit, you might want to cancel it by pressing the escape key. It is normal for complex models to take time, but for the purposes of this task, give up after a couple of minutes, and try simplifying your model._  
`r qend()` 
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`
We know that we are interested in the `Rtime ~ Delay * Group` interaction, because we want to see how people perform at one week vs one minute (the `Delay` variable) and whether this is different between those in each condition (the `Group` variable, specifying whether participants are in the 'StudyStudy' condition or the 'StudyTest' condition).  

We want to include Subject random effects _and_ Item random effects, and these groupings are crossed, so we're going to have `(1 + ??? | Subject_ID) + (1 + ??? | Test_word)`.  Each subject is only in one group, so we can only have `(1 + Delay | Subject_ID)`, but the Test_word items are seen by subjects in both groups, and at both timepoints, so we can have `(1 + Delay * Group | Test_word)`.  

This one will probably take a little bit of time:  
```{r}
m <- lmer(Rtime ~ Delay * Group +
             (1 + Delay | Subject_ID) +
             (1 + Delay * Group | Test_word),
           data=tel, control=lmerControl(optimizer = "bobyqa"))
```
`r solend()` 

`r qbegin("7")`
The model with maximal random effects will probably not converge, or will obtain a singular fit. One suggested approach here is to simplify the model until you achieve convergence ([Barr et al., 2013](https://doi.org/10.1016/j.jml.2012.11.001)).  

Incrementally simplify your random effect structure until you obtain a model that converges and is not a singular fit.  
  
*Tip:* you can look at the variance estimates and correlations easily by using the `VarCorr()` function. What jumps out?  
`r qend()` 
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`
There's very high correlations with the by-item random effects of the interaction Delay:Group. We might expect that because it's an interaction term, but it is quite a complex bit of the model, so let's remove it:  
```{r}
VarCorr(m)
```
```{r}
m1 <- lmer(Rtime ~ Delay*Group +
             (1 + Delay | Subject_ID) +
             (1 + Delay + Group | Test_word),
           data=tel, control=lmerControl(optimizer = "bobyqa"))
VarCorr(m1)
isSingular(m1)
```
We still have a singular fit here, and we still have quite high^[It's always going to be debateable about what is 'too high' because in certain situations you might expect correlations close to 1. It's best to think through whether it is a feasible value given the study itself] correlations between by-testword random effects. Thinking about the study, if we are going to remove __one__ of the by-testword random effects (`Delay` or `Group`), which one do we consider to be more theoretically justified? Is the effect of Delay likely to vary by test-words? More so than the effect of group is likely to vary by test-words? Quite possibly - there's no obvious reason for _certain_ words to be more memorable for people in one group vs another. But there is reason for words to vary in the effect that delay of one week has - how familiar a word is will likely influence the amount to which a week's delay has on recall.   

Let's remove the by-testword random effect of group. 
```{r}
m2 <- lmer(Rtime ~ Delay*Group +
             (1 + Delay | Subject_ID) +
             (1 + Delay | Test_word),
           data=tel, control=lmerControl(optimizer = "bobyqa"))
isSingular(m2)
VarCorr(m2)
```
Hooray, the model converged! 
```{r}
summary(m2)
```

Let's quickly visualise the interaction. Remember, lower reaction times are better here. 
It looks like we have replicated the hypothesised effect:  
```{r}
library(sjPlot)
plot_model(m2, type="int")
```

`r solend()` 


## Nested Random Effects

:::frame
__Data: Naming__ 

74 children from 10 schools were administered the full Boston Naming Test (BNT-60) on a yearly basis for 5 years to examine development of word retrieval. Five of the schools taught lessons in a bilingual setting with English as one of the languages, and the remaining five schools taught in monolingual English.  

The data is available at [https://uoepsy.github.io/data/bntmono.csv](https://uoepsy.github.io/data/bntmono.csv).  

```{r echo=FALSE}
bnt <- read_csv("../../data/bntmono.csv")
tibble(variable = names(bnt),
       description = c("unique child identifier","unique school identifier","score on the Boston Naming Test-60. Scores range from 0 to 60","Year of school","Mono/Bi-lingual School. 0 = Bilingual, 1 = Monolingual")
) %>% pander::pander()
```

:::

`r qbegin("8")`
Fit a model examining the interaction between the effects of school year and mono/bilingual teaching on word retrieval, with random intercepts only for children and schools.  
**tip:** make sure your variables are of the right type first - e.g. numeric, factor etc  
<br>
Examine the fit and consider your model assumptions, and assess what might be done to improve the model in order to make better statistical inferences. 
`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`
This is a quick way to make a set of variables factors:  
```{r}
bnt <- bnt %>% mutate(across(c(mlhome, school_id, child_id), factor))
bntm0 <- lmer(BNT60 ~ schoolyear * mlhome + (1 | school_id/child_id), data = bnt)
```

Residuals don't look zero mean:
```{r}
plot(bntm0, type=c("p","smooth"))
```

It looks a little like, compared to our model (black lines below) the children's scores (coloured lines) are more closely clustered together when they start school, and then they are more spread out by the end of the study. 
The fact that we're fitting the same slope for each child is restricting us here, so we should try fitting random effects of schoolyear. 
```{r}
augment(bntm0) %>%
  ggplot(aes(x=schoolyear, col=child_id)) + 
  geom_point(aes(y = BNT60))+
  geom_path(aes(y = BNT60))+
  geom_path(aes(y = .fitted), col="black", alpha=.3)+
  guides(col="none")+
  facet_wrap(~school_id)
```


```{r}
bntm1 <- lmer(BNT60 ~ schoolyear * mlhome + (1 + schoolyear | school_id/child_id), data = bnt)
plot(bntm1, type=c("p","smooth"))
```
Much better!  

Let's do some quick diagnostic checks for influence:
```{r}
inf1 <- hlm_influence(bntm1, level=1)
dotplot_diag(inf1$cooksd, cutoff = "internal")
```

If you check in the help for `dotplot_diag()`, it tells you that

a) we can add an index for the labels, and 
b) the coordinates (x,y) are flipped. We're telling R to change the limits of the y axis, but actually it is the x axis. This is just because we want to see the label for that point out to the right. 

```{r}
infchild <- hlm_influence(bntm1, level="child_id:school_id")
dotplot_diag(infchild$cooksd, cutoff = "internal", index = infchild$`child_id:school_id`) + 
  scale_y_continuous(limits=c(0,.05))
```
And then we can examine the effects to the fixed effects and our standard errors when we remove this child:
```{r}
del94 <- case_delete(bntm1, level="child_id:school_id", delete = "ID94:SC9")
cbind(del94$fixef.original, del94$fixef.delete)
```


`r optbegin("Optional: Case deletion influence on standard errors", olabel=F)`

We can examine the influence that deleting a case has on the standard errors.
The standard errors are the square-root of the diagonal of the model-implied variance-covariance matrix:

```{r}
cbind( 
  sqrt(diag(del94$vcov.original)),
  sqrt(diag(del94$vcov.delete))
)
```
`r optend()`

```{r}
infschool <- hlm_influence(bntm1, level="school_id")
dotplot_diag(infschool$cooksd, cutoff = "internal", index = infschool$school_id)
```
`r solend()`

`r qbegin("9")`
Using a method of your choosing, conduct inferences from your model and write up the results. 
`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`
Here we're just going to find the ICC from the null (intercept-only) model:  
```{r}
bnt_null <- lmer(BNT60 ~ 1 +  (1 | school_id/child_id), data = bnt)
as.data.frame(VarCorr(bnt_null)) %>%
    select(grp, vcov) %>%
    mutate(
        icc = cumsum(vcov)/sum(vcov)*100
    )
```

We'll use case-based bootstrapping as a demonstration, but other methods would be appropriate here. We have a large sample of children (74), each with 5 observations. However, we only have 10 schools. A standard likelihood ratio test using `anova(model1, model2)` might not be preferable here. 

This took quite a while to run: 
```{r eval=F}
library(lmeresampler)
bntm1BS <- bootstrap(bntm1, .f=fixef, type = "case", B = 2000, resample = c(FALSE,TRUE,FALSE))
confint(bntm1BS, type = "perc")
```
```{r echo=FALSE}
library(lmeresampler)
load("data/bntbs.rdata")
confint(bntm1BS, type = "perc")
```

```{r include=F}
res <- confint(bntm1BS, type = "perc")
res[,2:4]<-round(res[,2:4],2)
res
```

:::int

Multilevel level linear regression was used to investigate childrens' development of word retrieval over 5 years of school, and whether development was dependent upon the school teaching classes monolingually or bilingually. 
Initial evaluation of the intercept-only model indicated that the clustering of multiple observations from children within schools accounted for 39.7% of the variance in scores on the Boston Naming Task (BNT60, range 0 to 60).
BNT60 scores were modelled with fixed effects of school year (1-5) and monolingual teaching (monolingual vs bilingual, treatment coded with monolingual as the reference level). Random intercepts and slopes of school year were included for schools and for children nested within schools. The model was fitting with maximum likelihood estimation using the default optimiser from the **lme4** package (Bates et al., 2015).  
95% Confidence for fixed effect estimates were constructed by case-based bootstrapping with 2000 bootstraps in which children, (but neither observations within children nor the schools within which children were nested) were resampled. 
Results indicated that children's scores on the BNT60 increased over the 5 years in which they were studied, with children from bilingual schools increasing in scores by `r res[2,2]` ([`r paste(unlist(res[2,3:4]),collapse=" -- ")`]) every school year. There was a significant interaction between mono/bilingual schools and changes over the school year, with children from monolingual schools increasing `r res[4,2]` ([`r paste(unlist(res[4,3:4]),collapse=" -- ")`]) less than those from bilingual schools for every additional year of school. Full model results can be found in Table 1. 

:::

Table 1
```{r echo=FALSE, results="asis"}
predlab <- c("Intercept","School Year","MonolingualSchool [1]","School Year:MonolingualSchool [1]")
names(predlab) <- names(fixef(bntm1))
mytab <- tab_model(bntm1,show.p = F, string.ci="95% CI<br>bootstrap",
                   pred.labels = predlab)
bsci <- confint(bntm1BS, type = "perc")
replacewiththis <- paste0(round(bsci$lower,2), "&nbsp;&ndash;&nbsp;", round(bsci$upper,2))
mytab$page.content <- gsub("4.22\\&nbsp\\;\\&ndash\\;\\&nbsp\\;8.31", replacewiththis[1], mytab$page.content)
mytab$page.content <- gsub("4.86\\&nbsp\\;\\&ndash\\;\\&nbsp\\;7.88", replacewiththis[2], mytab$page.content)
mytab$page.content <- gsub("-2.74\\&nbsp\\;\\&ndash\\;\\&nbsp\\;3.02", replacewiththis[3], mytab$page.content)
mytab$page.content <- gsub("-4.74\\&nbsp\\;\\&ndash\\;\\&nbsp\\;-0.47", replacewiththis[4], mytab$page.content)
cat(mytab$page.content)
```

```{r}
library(effects)
as.data.frame(effect("schoolyear:mlhome",bntm1)) %>%
  ggplot(., aes(x=schoolyear,y=fit,col=mlhome))+
  geom_pointrange(aes(ymin=lower,ymax=upper))+
  scale_color_manual(NULL,labels=c("Bilingual","Monolingual"),values=c("tomato1","navyblue"))+
  labs(x="- School Year -", y="BNT-60")
```


`r solend()`

<div class="tocify-extend-page" data-unique="tocify-extend-page" style="height: 0;"></div>
