---
title: "Recap of multilevel models"
link-citations: yes
params: 
    SHOW_SOLS: TRUE
    TOGGLE: TRUE
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
#| include: false
source('assets/setup.R')
library(tidyverse)
library(patchwork)
library(effects)
library(knitr)
library(kableExtra)
library(xaringanExtra)
xaringanExtra::use_panelset()
```


:::lo
__No specific exercises this week__  

This week, there aren't any exercises, but there is a small recap reading of multilevel models, followed by some 'flashcard' type boxes to help you test your understanding of some of the key concepts.   
  
Please use the lab sessions to go over exercises from previous weeks, as well as asking any questions about the content below.   

:::

# Flashcards: `lm` to `lmer`

```{r}
#| echo: false
require(patchwork)
source("plottingmixedmods.R")
random_intercept_model = mod2
random_slopes_model = mod3
b1 <- fixef(mod3) %>% round(3)
u1 <- ranef(mod3)$subject %>% round(3)
su <- as.data.frame(VarCorr(mod3))[, 5] %>% round(3)
s <- sigma(mod3) %>% round(3)
```


In a simple linear regression, there is only considered to be one source of random variability: any variability left unexplained by a set of predictors (which are modelled as fixed estimates) is captured in the model residuals.  
  
Multi-level (or 'mixed-effects') approaches involve modelling more than one source of random variability - as well as variance resulting from taking a random sample of observations, we can identify random variability across different groups of observations. For example, if we are studying a patient population in a hospital, we would expect there to be variability across the our sample of patients, but also across the doctors who treat them.  
  
We can account for this variability by allowing the outcome to be lower/higher for each group (a random intercept) and by allowing the estimated effect of a predictor vary across groups (random slopes).  
  
:::blue
Before you expand each of the boxes below, think about how comfortable you feel with each concept.  
This content is very cumulative, which means often going back to try to isolate the place which we need to focus efforts in learning. 
:::

`r optbegin("Simple Linear Regression", olabel=FALSE,toggle=params$TOGGLE)`

:::frame
**Formula:**  
  
+ $y_i = \beta_0 + \beta_1 x_i + \epsilon_i$  
  
**R command:**  
  
+ `lm(outcome ~ predictor, data = dataframe)`  
  
*Note:* this is the same as `lm(outcome ~ 1 + predictor, data = dataframe)`. The `1 +` is always there unless we specify otherwise (e.g., by using `0 +`).

:::


```{r}
#| echo: false
plot_data + plot_lm
```

`r optend()`

`r optbegin("Clustered (multi-level) data", olabel=FALSE,toggle=params$TOGGLE)`
When our data is clustered (or 'grouped') such that datapoints are no longer independent, but belong to some grouping such as that of multiple observations from the same subject, we have multiple sources of random variability. A simple regression does not capture this.  

If we separate out our data to show an individual plot for each grouping (in this data the grouping is by subjects), we can see how the fitted regression line from `lm()` is assumed to be the same for each group.  
  
```{r}
#| echo: false
#| fig-height: 10
plot_lm_fac
```

`r optend()`

`r optbegin("Random intercepts", olabel=FALSE,toggle=params$TOGGLE)`
By including a random-intercept term, we are letting our model estimate random variability around an average parameter (represented by the fixed effects) for the clusters.

:::frame 

**Formula:**  
Level 1:  
  
+ $y_{ij} = \beta_{0i} + \beta_{1i} x_{ij} + \epsilon_{ij}$  
  
Level 2:  
  
+ $\beta_{0i} = \gamma_{00} + \zeta_{0i}$   

Where the expected values of $\zeta_{0}$, and $\epsilon$ are 0, and their variances are $\sigma_{0}^2$ and $\sigma_\epsilon^2$ respectively. We will further assume that these are normally distributed.

We can now see that the intercept estimate $\beta_{0i}$ for a particular group $i$ is represented by the combination of a mean estimate for the parameter ($\gamma_{00}$) and a random effect for that group ($\zeta_{0i}$).

**R command:**  
  
+ `lmer(outcome ~ predictor + (1 | grouping), data = dataframe)`  
  
:::

Notice how the fitted line of the random intercept model has an adjustment for each subject.  
Each subject's line has been moved up or down accordingly. 

```{r}
#| echo: false
#| fig-height: 8
#| fig-width: 12
#| out-width: "100%"
plot_lm_fac + plot_ri_fac
```

`r optend()`

`r optbegin("Shrinkage", olabel=FALSE,toggle=params$TOGGLE)`

If you think about it, we might have done a similar thing to the random intercept with the tools we already had at our disposal, by using `lm(y~x+subject)`.
This would give us a coefficient for the difference between each subject and the reference level intercept, or we could extend this to `lm(y~x*subject)` to give us an adjustment to the slope for each subject.  
  
However, the estimate of these models will be slightly different:  

```{r}
#| echo: false
plot_shrinkage
```

**Why?** One of the benefits of multi-level models is that our cluster-level estimates are shrunk towards the average depending on a) the level of across-cluster variation and b) the number of datapoints in clusters. 

`r optend()`

`r optbegin("Random slopes", olabel=FALSE,toggle=params$TOGGLE)`

:::frame 

**Formula:**  
Level 1:  
  
+ $y_{ij} = \beta_{0i} + \beta_{1i} x_{ij} + \epsilon_{ij}$  
  
Level 2:  
  
+ $\beta_{0i} = \gamma_{00} + \zeta_{0i}$  
+ $\beta_{1i} = \gamma_{10} + \zeta_{1i}$  

Where the expected values of $\zeta_0$, $\zeta_1$, and $\epsilon$ are 0, and their variances are $\sigma_{0}^2$, $\sigma_{1}^2$, $\sigma_\epsilon^2$ respectively. We will further assume that these are normally distributed.

As with the intercept $\beta_{0i}$, the slope of the predictor $\beta_{1i}$ is now modelled by a mean $\gamma_{10}$ and a random effect for each group ($\zeta_{1i}$). 


**R command:** 
  
+ `lmer(outcome ~ predictor + (1 + predictor | grouping), data = dataframe)`  
  
*Note:* this is the same as `lmer(outcome ~ predictor + (predictor | grouping), data = dataframe)` . Like in the fixed-effects part, the `1 +` is assumed in the random-effects part.

:::

```{r}
#| echo: false
#| fig-height: 8
#| fig-width: 12
plot_ri_fac + plot_rs_fac
```

`r optend()`


`r optbegin("Fixed effects", olabel=FALSE, toggle=params$TOGGLE)`
The plot below show the fitted values for each subject from the random slopes model `lmer(outcome ~ predictor + (1 + predictor | grouping), data = dataframe)`  

```{r}
#| echo: false
plot_rs
```

The thick green line shows the fixed intercept and slope around which the groups all vary randomly.  

The *fixed effects* are the parameters that define the thick green line, and we can extract them using the `fixef()` function:

These are the overall intercept and slope. 
```{r}
fixef(random_slopes_model)
```
`r optend()` 

`r optbegin("Random effects", olabel=FALSE, toggle=params$TOGGLE)`  
The plots below show the fitted values for each subject from each model that we have gone through in these expandable boxes (simple linear regression, random intercept, and random intercept & slope): 

```{r}
#| echo: false
#| fig-width: 12
plotdata2<-
  ggplot(dat, aes(x=x1,y=outcome, col=subject))+
  geom_point(alpha=0.5)+geom_path(alpha=0.5)+
  theme_classic()+
  theme(plot.title = element_text(hjust = 0.5), legend.position = "none")+
  scale_y_continuous(breaks=NULL)+scale_x_continuous(breaks=NULL)+
  labs(title="- The data (by subject) - ", y="y", x="x")+
  NULL

#(plot_data + plotdata2 ) / (plot_lm2 + plot_ri + plot_rs)
plot_lm2 + plot_ri + plot_rs
```

In the random-intercept model (center panel), the differences from each of the subjects' intercepts to the fixed intercept (thick green line) have mean 0 and standard deviation $\sigma_0$.  The standard deviation (and variance, which is $\sigma_0^2$) is what we see in the random effects part of our model summary (or using the `VarCorr()` function).  

```{r}
#| echo: false
#| out-width: "400px"
knitr::include_graphics("images/varcors.PNG")
```

In the random-slope model (right panel), the same is true for the differences from each subjects' slope to the fixed slope. 
We can extract the deviations for each group from the fixed effect estimates using the `ranef()` function.  
  
These are the deviations from the overall intercept ($\widehat \gamma_{00} = `r b1[1]`$) and slope ($\widehat \gamma_{10} = `r b1[2]`$) for each subject $i$.  
```{r}
ranef(random_slopes_model)
```
`r optend()` 

`r optbegin("Group-level coefficients", olabel=FALSE, toggle=params$TOGGLE)`
We can also see the actual intercept and slope for each subject $i$ directly, using the `coef()` function.  

```{r}
coef(random_slopes_model)
```

Notice that the above are the fixed effects + random effects estimates, i.e. the overall intercept and slope + deviations for each subject.

```{r}
coef(random_intercept_model)
```
`r optend()` 

`r optbegin("Visualising Model Fitted values",olabel=FALSE,toggle=TRUE)`
The model fitted (or "model predicted") values can be obtained using `predict()` (returning just the values) or `broom.mixed::augment()` (returning the values attached to the data that is inputted to the model).   

To plot, them, we would typically like to plot the fitted values for each group (e.g. subject)

```{r}
library(broom.mixed)
augment(random_slopes_model) %>%
  ggplot(.,aes(x=x1, y=.fitted, group=subject))+
  geom_line()
```


`r optend()`

`r optbegin("Visualising Fixed Effects",olabel=FALSE,toggle=TRUE)`
If we want to plot the fixed effects from our model, we have to do something else. Packages like __sjPlot__ make it incredibly easy (but sometimes _too_ easy), so a nice option is to use the __effects__ package to construct a dataframe of the linear prediction accross the values of a predictor, plus standard errors and confidence intervals. We can then pass this to `ggplot()`, giving us all the control over the aesthetics.  

```{r}
library(effects)
ef <- as.data.frame(effect(term="x1",mod=random_slopes_model))
ggplot(ef, aes(x=x1,y=fit, ymin=lower,ymax=upper))+
  geom_line()+
  geom_ribbon(alpha=.3)
```


`r optend()`


`r optbegin("Plotting random effects", olabel=FALSE, toggle=params$TOGGLE)`
The quick and easy way to plot your random effects is to use the `dotplot.ranef.mer()` function in `lme4`. 

```{r}
randoms <- ranef(random_slopes_model, condVar=TRUE)
dotplot.ranef.mer(randoms)
```

<!-- `r optbegin("Completely optional - extracting them for plotting in ggplot", olabel=FALSE, toggle=params$TOGGLE)` -->
<!-- Sometimes, however, we might want to have a bit more control over our plotting, we can extract the estimates and correlations for each subject:   -->
<!-- ```{r} -->
<!-- #we can get the random effects: -->
<!-- #(note that we use $subject because there might be other groupings, and the ranef() function will give us a list, with one element for each grouping variable) -->
<!-- randoms <- -->
<!--   ranef(random_slopes_model)$subject %>% -->
<!--   mutate(subject = row.names(.)) %>%  # the subject IDs are stored in the rownames, so lets add them as a variable -->
<!--   pivot_longer(cols=1:2, names_to="term",values_to="estimate") # finally, let's reshape it for plotting -->

<!-- #and the same for the standard errors (from the arm package): -->
<!-- randoms_se <- -->
<!--   arm::se.ranef(random_slopes_model)$subject %>% -->
<!--   as.data.frame() %>% -->
<!--   mutate(subject = row.names(.)) %>% -->
<!--   pivot_longer(cols=1:2, names_to="term",values_to="se") -->

<!-- # join them together: -->
<!-- ranefs_plotting <- left_join(randoms, randoms_se) -->

<!-- # it's easier for plotting if we -->
<!-- ggplot(ranefs_plotting, aes(y=subject, x=estimate))+ -->
<!--   geom_errorbarh(aes(xmin=estimate-2*se, xmax=estimate+2*se))+ -->
<!--   facet_wrap(~term, scales="free_x") -->

<!-- ``` -->

<!-- `r optend()` -->

`r optend()` 

`r optbegin("Nested and Crossed structures",olabel=FALSE,toggle=params$TOGGLE)`

The same principle we have seen for one level of clustering can be extended to clustering at different levels (for instance, observations are clustered within subjects, which are in turn clustered within groups). 

Consider the example where we have observations for each student in every class within a number of schools:  

```{r}
#| echo: false
#| out-width: "1200px"
knitr::include_graphics("images/structure_id.png")
```

**Question:** Is "Class 1" in "School 1" the same as "Class 1" in "School 2"?  
  
No.  
The classes in one school are distinct from the classes in another **even though they are named the same**.  
  
The classes-within-schools example is a good case of **nested random effects** - one factor level (one group in a grouping varible) appears *only within* a particular level of another grouping variable.  
  
In R, we can specify this using:  
  
`(1 | school) + (1 | class:school)`  
  
or, more succinctly:  
  
`(1 | school/class)`  

Consider another example, where we administer the same set of tasks at multiple time-points for every participant.  
  
**Question:** Are tasks nested within participants?  
  
No.  
Tasks are seen by multiple participants (and participants see multiple tasks).  
  
We could visualise this as the below:  
```{r}
#| echo: false
#| out-width: "400px"
knitr::include_graphics("images/structure_crossed.png")
```

In the sense that these are not nested, they are **crossed** random effects.  
  
In R, we can specify this using:  

`(1 | subject) + (1 | task)`  

:::blue
**Nested vs Crossed**  

*Nested:* Each group belongs uniquely to a higher-level group.   

*Crossed:* Not-nested. 

:::

Note that in the schools and classes example, had we changed data such that the classes had unique IDs (e.g., see below), then the structures `(1 | school) + (1 | class)` and `(1 | school/class)` would give the same results.  
```{r}
#| echo: false
#| out-width: "1200px"
knitr::include_graphics("images/structure_nested.png")
```

`r optend()`


# MLM in a nutshell

:::statbox
__Model Structure & Notation__ 

MLM allows us to model effects in the linear model as _varying_ between groups. Our coefficients we remember from simple linear models (the $\beta$'s) are modelled as a distribution that has an overall mean around which our groups vary. We can see this in @fig-unlmm, where both the intercept and the slope of the line are modelled as varying by-groups. @fig-unlmm shows the overall line in blue, with a given group's line in green.  


```{r}
#| label: fig-unlmm
#| fig-cap: "Multilevel Model. Each group (e.g. the group in the green line) deviates from the overall fixed effects (the blue line), and the individual observations (green points) deviate from their groups line" 
#| echo: false
#| out-width: "100%"
knitr::include_graphics('images/un_lmm.png')
```

The formula notation for these models involves separating out our effects $\beta$ into two parts: the overall effect $\gamma$ + the group deviations $\zeta_i$:  

$$
\begin{align}
& \text{for observation }j\text{ in group }i \\
\quad \\
& \text{Level 1:} \\
& \color{red}{y_{ij}}\color{black} = \color{blue}{\beta_{0i} \cdot 1 + \beta_{1i} \cdot x_{ij}}\color{black} + \varepsilon_{ij} \\
& \text{Level 2:} \\
& \color{blue}{\beta_{0i}}\color{black} = \gamma_{00} + \color{orange}{\zeta_{0i}} \\
& \color{blue}{\beta_{1i}}\color{black} = \gamma_{10} + \color{orange}{\zeta_{1i}} \\
\quad \\
& \text{Where:} \\
& \gamma_{00}\text{ is the population intercept, and }\color{orange}{\zeta_{0i}}\color{black}\text{ is the deviation of group }i\text{ from }\gamma_{00} \\
& \gamma_{10}\text{ is the population slope, and }\color{orange}{\zeta_{1i}}\color{black}\text{ is the deviation of group }i\text{ from }\gamma_{10} \\
\end{align}
$$

The group-specific deviations $\zeta_{0i}$ from the overall intercept are assumed to be normally distributed with mean $0$ and variance $\sigma_0^2$. Similarly, the deviations $\zeta_{1i}$ of the slope for group $i$ from the overall slope are assumed to come from a normal distribution with mean $0$ and variance $\sigma_1^2$. The correlation between random intercepts and slopes is $\rho = \text{Cor}(\zeta_{0i}, \zeta_{1i}) = \frac{\sigma_{01}}{\sigma_0 \sigma_1}$:

$$
\begin{bmatrix} \zeta_{0i} \\ \zeta_{1i} \end{bmatrix} 
\sim N
\left(
    \begin{bmatrix} 0 \\ 0 \end{bmatrix}, 
    \begin{bmatrix} 
        \sigma_0^2 & \rho \sigma_0 \sigma_1 \\
        \rho \sigma_0 \sigma_1 & \sigma_1^2
    \end{bmatrix}
\right)
$$

The random errors, independently from the random effects, are assumed to be normally distributed with a mean of zero  
$$
\epsilon_{ij} \sim N(0, \sigma_\epsilon^2)
$$

:::

:::rtip
__MLM in R__  

We can fit these models using the R package __lme4__, and the function `lmer()`. 
Think of it like building your linear model `lm(y ~ 1 + x)`, and then allowing effects (i.e. things on the right hand side of the `~` symbol) to vary by the grouping of your data. We specify these by adding `(vary these effects | by these groups)` to the model: 
```{r}
#| echo: false
read_csv("https://uoepsy.github.io/data/toyexample.csv") %>% 
  transmute(
    x = round(hrs_week,2),
    y = round(R_AGE,1),
    obs = paste0("child_",as.numeric(as.factor(toy))),
    group = paste0("school_",as.numeric(as.factor(toy_type)))
  ) -> df
```
```{r}
library(lme4)
m1 <- lmer(y ~ x + (1 + x | group), data = df)
summary(m1)
```

```{r}
#| echo: false
b1 <- fixef(m1) %>% round(3)
u1 <- ranef(m1)$group %>% round(3)
su <- as.data.frame(VarCorr(m1))[, 5] %>% round(3)
s <- sigma(m1) %>% round(3)
```

The summary of the `lmer` output returns estimated values for

Fixed effects:

- $\widehat \gamma_{00} = `r b1[1]`$ 
- $\widehat \gamma_{10} = `r b1[2]`$

Variability of random effects:

- $\widehat \sigma_{0} = `r su[1]`$
- $\widehat \sigma_{1} = `r su[2]`$

Correlation of random effects:

- $\widehat \rho = `r su[3]`$

Residuals:

- $\widehat \sigma_\epsilon = `r su[4]`$

:::



# Flashcards: Getting p-values/CIs for Multilevel Models

:::frame
Inference for multilevel models is tricky, and there are lots of different approaches.  
You might find it helpful to think of the majority of these techniques as either:  

A. Fitting a full model and a reduced model. These differ only with respect to the relevant effect. Comparing the overall fit of these models by some metric allows us to isolate the improvement due to our effect of interest. 
B. Fitting the full model and
  - using some method of approximating the degrees of freedom for the tests of whether a coefficient is zero.
  - constructing some confidence intervals (e.g. via bootstrapping) in order to gain a range of plausible values for the estimate (typically we then ask whether zero is within the interval)

Neither of these is _correct_ or _incorrect_, but they each have different advantages. In brief: 


- Likelihood Ratio Tests = better with bigger samples (of groups, and of observations within groups)
- Satterthwaite $df$ = Very easy to implement
- Kenward-Rogers $df$ = Good when working with small samples
- Parametric Bootstrap = takes time to run, but in general a reliable approach
- Non-Parametric Bootstrap = takes time, needs careful thought about which levels to resample, but means we can relax distributional assumptions (e.g. about normality of residuals).  

For the examples below, we're investigating how "hours per week studied" influences a child's reading age. We have data from 132 children from 20 schools, and we have fitted the model:   
```{r}
#| echo: false
read_csv("https://uoepsy.github.io/data/toyexample.csv") %>% 
  transmute(
    hrs_week = round(hrs_week,2),
    reading_age = round(R_AGE,1),
    child = paste0("child_",as.numeric(as.factor(toy))),
    school = paste0("school_",as.numeric(as.factor(toy_type)))
  ) -> childread
```
```{r}
full_model <- lmer(reading_age ~ 1 + hrs_week + (1 + hrs_week | school), 
                   data = childread)
```

:::


`r optbegin("Use a normal approximation (not advisable)", olabel=F,toggle=params$TOGGLE)`

Remember that the $t$ distribution starts to look more and more like the $z$ ("normal") distribution when degrees of freedom increase? We could just assume we have infinite degrees of freedom in our test statistics, and pretend that the $t$-values we get are actually $z$-values. This is "anti-conservative" inasmuch as it is not a very cautious approach, and we are likely to have a higher false positive rate (e.g. more chance of saying "there __is__ an effect!" when there actually isn't.)
```{r}
coefs <- as.data.frame(summary(full_model)$coefficients)
coefs$p.z <- 2 * (1 - pnorm(abs(coefs[,3])))
coefs
```

`r optend()`
`r optbegin("Satterthwaite df approximation", olabel=F,toggle=params$TOGGLE)`

There have been a couple of methods proposed to estimate the degrees of freedom in order to provide a better approximation to the null distribution of our tests. The way the Satterthwaite method has been implemented in R will just add a column for p-values to your `summary(model)` output).  
  
Load the __lmerTest__ package, refit the model, and voila!  
```{r}
library(lmerTest)
full_model <- lmer(reading_age ~ 1 + hrs_week + (1 + hrs_week | school), 
                   data = childread)
summary(full_model)$coefficients
```

:::int
__Reporting__  


To account for the extra uncertainty brought by the inclusion of random effects in the model, the degrees of freedom in the coefficients tests have been corrected via Satterthwaite's method.   
...   
...   
Weekly hours of reading practice was associated increased reading age ($\beta = 1.15,\ SE = 0.30,\ t(17.51^*) = 3.88,\ p = .001$).

:::

__Note:__ if you have the __lmerTest__ package loaded, then all the models you fit with `lmer()` will show p-values! If you want to stop this, then you will have to detach/unload the package, and refit the model.  
```{r}
detach("package:lmerTest", unload=TRUE)
```

`r optend()`

`r optbegin("Kenward Rogers df approximations", olabel=F, toggle=params$TOGGLE)`

The Kenward-Rogers approach is slightly more conservative than the Satterthwaite method, and has been implemented for model comparison between a full model and a restricted model (a model without the parameter of interest), using the KR adjustment for the denominator degrees of freedom in the $F$-test.  
For this, models must be fitted with REML, __not__ ML. The function `KRmodcomp()` will take care of this and re-fit them for you.   
```{r}
library(pbkrtest)
restricted_model <- lmer(reading_age ~ 1 + (1 + hrs_week | school), 
                   data = childread)
full_model <- lmer(reading_age ~ 1 + hrs_week + (1 + hrs_week | school), 
                   data = childread)
KRmodcomp(full_model, restricted_model)
```

:::int
__Reporting__  

To account for the extra uncertainty brought by the inclusion of random effects in the model, the denominator degrees of freedom in have been corrected via Kenward-Rogers' method.  
...  
...  
Inclusion of weekly hours of reading practice as a predictor was associated with an improvement in model fit ($F(1,17.74^*) = 14.71,\ p = .001$).
:::

`r optend()`
`r optbegin("Likelihood Ratio Test (LRT)", olabel=F, toggle=params$TOGGLE)`

Conduct a model comparison between your model and a restricted model (a model without the parameter of interest), evaluating the change in log-likelihood.

:::sticky
__Likelihood__  

"likelihood" is a function that associates to a parameter the probability (or probability density) of observing the given sample data.  
In simpler terms, the likelihood is the probability of the model given that we have this data.   

The intuition behind likelihood:  

1. I toss a coin 10 time and observed 8 Heads.  
2. We can think of a 'model' of the process that governs the coin's behaviour in terms of just one number: a parameter that indicates the probability of the coin landing on heads.  
I have two models: 
  - Model 1: The coin will land on heads 20% of the time. $P(Heads)=0.2$  
  - Model 2: The coin will land on heads 70% of the time. $P(Heads)=0.7$  
3. Given the data I observe (see 1, above), we can (hopefully) intuit that Model 2 is more likely than Model 1. 

For a (slightly) more detailed explanation, see [here](lvp.html).  

:::

This method assumes that the ratio of two likelihoods will (as sample size increases) become closer to being $\chi^2$ distributed, and so may be unreliable for small samples.  

Models must be fitted with ML, __not__ REML. The function `anova()` will re-fit them for you.   
```{r message=T,warning=T}
restricted_model <- lmer(reading_age ~ 1 + (1 + hrs_week | school), 
                   data = childread)
full_model <- lmer(reading_age ~ 1 + hrs_week + (1 + hrs_week | school), 
                   data = childread)
anova(restricted_model, full_model, test = "Chisq")
```

:::int
__Reporting__  

A likelihood ratio test indicated that the inclusion of weekly hours of reading practice as a predictor was associated with an improvement in model fit ($\chi^2(1) = 11.86, p < .001$).
:::

`r optend()`
`r optbegin("Parametric Bootstrap LRT", olabel=F, toggle=params$TOGGLE)`

There are also various "bootstrapping" methods which it is worth looking into. Think back to USMR when we first learned about hypothesis testing. Remember that we did lots of simulating data, so that we can compare what we actually observe with what we would expect if the null hypothesis were true? By doing this, we were essentially _creating_ a null distribution, so that our calculating a p-value can become an issue of summarising data (e.g. calculate the proportion of our simulated null distribution that is more extreme than our observed statistic)

Instead of assuming that the likelihood ratio test statistics are $\chi^2$-distributed, we can bootstrap this test instead. This approach simulates data from the simpler model, fits both the simple model and the complex model and evaluates the change in log-likelihood. By doing this over and over again, we build a distribution of what changes in log-likelihood we would be likely to see if the more complex model is not any better. In this way it actually constructs a distribution reflecting our null hypothesis, against which we can then compare our actual observed effect
```{r echo=F}
set.seed(993)
```
```{r eval=FALSE}
library(pbkrtest)
PBmodcomp(full_model, restricted_model, nsim=1000)
```

:::int
__Reporting__  

A parametric bootstrap likelihood ratio test (R = 1000) indicated that the inclusion of weekly hours of reading practice as a predictor was associated with an improvement in model fit ($LRT = 11.84, p = .002$).
:::

`r optend()`
`r optbegin("Parametric Bootstrap Confidence Intervals", olabel=F, toggle=params$TOGGLE)`

Much the same as above, but with just one model we simulate data many times and refit the model, so that we get an empirical distribution that we can use to construct confidence intervals for our effects. 
```{r}
confint(full_model, method="boot")
```

:::int
__Reporting__  

95% Confidence Intervals were obtained via parametric bootstrapping with 1000 iterations.  
...  
...   
Weekly hours of reading practice was associated increased reading age ($\beta = 1.15,\ 95%\ CI\ [0.63 -- 1.73]$).

:::

`r optend()`
`r optbegin("Non-Parametric Bootstrap Confidence Intervals", olabel=F, toggle=params$TOGGLE)`

It's worth noting that there are many different types of bootstrapping that we can conduct. Different methods of bootstrapping vary with respect to the assumptions we will have to make when using them for drawing inferences. For instance, the parametric bootstrap discussed above assumes that explanatory variables are fixed and that model specification and the distributions such as $\zeta_i \sim N(0,\sigma_{\zeta})$ and $\varepsilon_i \sim N(0,\sigma_{\varepsilon})$ are correct.  
An alternative is to generate a distribution by __resampling with replacement__ from our data, fitting our model to the resample, and then repeating this over and over. This doesn't have to rely on assumptions about the shape of the distributions of $\zeta_i$ and $\varepsilon_i$ - we just need to ensure that we correctly specify the hierarchical dependency of data. It does, however, require the decision of at which levels to resample.   

```{r}
#| echo: false
set.seed(993)
```

```{r}
full_model <- lmer(reading_age ~ 1 + hrs_week + (1 + hrs_week | school), 
                   data = childread)
library(lmeresampler)
fullmod_bs <- 
  bootstrap(full_model, # this is the model
            .f = fixef, # we want the fixef from each bootstrap
            type = "case", # case based bootstrap
            B=2000, # do 2000 bootstraps
            resample = c(TRUE, TRUE) # resample both schools and individual children
  ) 
confint(fullmod_bs, type = "perc")
```
```{r}
#| echo: false
res=confint(fullmod_bs, type = "perc")
```


:::int
__Reporting__  

95% Confidence Intervals were obtained via case-based bootstrapping (resampling both toy types and individual toys) with 2000 iterations.  
...  
...   
Weekly hours of reading practice was associated increased reading age ($\beta$ = `r res[2,2]`, 95% CI [`r res[2,3]` -- `r res[2,4]`]).

:::

`r optend()`




<div class="tocify-extend-page" data-unique="tocify-extend-page" style="height: 0;"></div>