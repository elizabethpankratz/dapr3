---
title: "optional eigen decomp"
params: 
    SHOW_SOLS: TRUE
    TOGGLE: TRUE
editor_options: 
  chunk_output_type: inline
---

```{r}
#| label: setup
#| include: false
source('assets/setup.R')
library(xaringanExtra)
library(tidyverse)
library(patchwork)
xaringanExtra::use_panelset()

```

Doing data reduction can feel a bit like magic, and in part that's just because it's quite complicated. 

**The intuition**  

Consider one way we might construct a correlation matrix - as the product of vector $\mathbf{f}$ with $\mathbf{f'}$ (f transposed): 
$$
\begin{equation*}
\mathbf{f} = 
\begin{bmatrix}
0.9 \\
0.8 \\
0.7 \\
0.6 \\
0.5 \\
0.4 \\
\end{bmatrix} 
\qquad 
\mathbf{f} \mathbf{f'} = 
\begin{bmatrix}
0.9 \\
0.8 \\
0.7 \\
0.6 \\
0.5 \\
0.4 \\
\end{bmatrix} 
\begin{bmatrix}
0.9, 0.8, 0.7, 0.6, 0.5, 0.4 \\
\end{bmatrix} 
\qquad = \qquad
\begin{bmatrix}
0.81, 0.72, 0.63, 0.54, 0.45, 0.36 \\
0.72, 0.64, 0.56, 0.48, 0.40, 0.32 \\
0.63, 0.56, 0.49, 0.42, 0.35, 0.28 \\
0.54, 0.48, 0.42, 0.36, 0.30, 0.24 \\
0.45, 0.40, 0.35, 0.30, 0.25, 0.20 \\
0.36, 0.32, 0.28, 0.24, 0.20, 0.16 \\
\end{bmatrix} 
\end{equation*} 
$$

But we constrain this such that the diagonal has values of 1 (the correlation of a variable with itself is 1), and lets call it **R**.
$$
\begin{equation*}
\mathbf{R} = 
\begin{bmatrix}
1.00, 0.72, 0.63, 0.54, 0.45, 0.36 \\
0.72, 1.00, 0.56, 0.48, 0.40, 0.32 \\
0.63, 0.56, 1.00, 0.42, 0.35, 0.28 \\
0.54, 0.48, 0.42, 1.00, 0.30, 0.24 \\
0.45, 0.40, 0.35, 0.30, 1.00, 0.20 \\
0.36, 0.32, 0.28, 0.24, 0.20, 1.00 \\
\end{bmatrix} 
\end{equation*} 
$$

PCA is about trying to determine a vector **f** which generates the correlation matrix **R**. a bit like unscrambling eggs!  

in PCA, we express $\mathbf{R = CC'}$, where $\mathbf{C}$ are our principal components.  
If $n$ is number of variables in $R$, then $i^{th}$ component $C_i$ is the linear sum of each variable multiplied by some weighting:  
$$
C_i = \sum_{j=1}^{n}w_{ij}x_{j}
$$

**How do we find $C$?**

This is where "eigen decomposition" comes in.  
For the $n \times n$ correlation matrix $\mathbf{R}$, there is an **eigenvector** $x_i$ that solves the equation 
$$
\mathbf{x_i R} = \lambda_i \mathbf{x_i}
$$
Where the vector multiplied by the correlation matrix is equal to some **eigenvalue** $\lambda_i$ multiplied by that vector.  
We can write this without subscript $i$ as: 
$$
\begin{align}
& \mathbf{R X} = \mathbf{X \lambda} \\
& \text{where:} \\
& \mathbf{R} = \text{correlation matrix} \\
& \mathbf{X} = \text{matrix of eigenvectors} \\
& \mathbf{\lambda} = \text{vector of eigenvalues}
\end{align}
$$
the vectors which make up $\mathbf{X}$ must be orthogonal [($\mathbf{XX' = I}$)](https://miro.medium.com/max/700/1*kyg5XbrY1AOB946IE5nWWg.png), which means that $\mathbf{R = X \lambda X'}$
 
We can actually do this in R manually. 
Creating a correlation matrix
```{r}
# lets create a correlation matrix, as the produce of ff'
f <- seq(.9,.4,-.1)
R <- f %*% t(f)
#give rownames and colnames
rownames(R)<-colnames(R)<-paste0("V",seq(1:6))
#constrain diagonals to equal 1
diag(R)<-1
R
```

Eigen Decomposition
```{r}
# do eigen decomposition
e <- eigen(R)
print(e, digits=2)
```

The eigenvectors are orthogonal ($\mathbf{XX' = I}$):
```{r}
round(e$vectors %*% t(e$vectors),2)
```

The Principal Components $\mathbf{C}$ are the eigenvectors scaled by the square root of the eigenvalues:
```{r}
#eigenvectors
e$vectors
#scaled by sqrt of eigenvalues
diag(sqrt(e$values))

C <- e$vectors %*% diag(sqrt(e$values))
C
```

And we can reproduce our correlation matrix, because $\mathbf{R = CC'}$. 
```{r}
C %*% t(C)
```
Now lets imagine we only consider 1 principal component.  
We can do this with the `principal()` function: 
```{r}
library(psych)
pc1<-principal(R, nfactors = 1, covar = FALSE, rotate = 'none')
pc1
```

Look familiar? It looks like the first component we computed manually. The first column of $\mathbf{C}$:
```{r}
cbind(pc1$loadings, C=C[,1])
```
We can now ask "how well does this component (on its own) recreate our correlation matrix?" 
```{r}
C[,1] %*% t(C[,1])
```
It looks close, but not quite. How much not quite? Measurably so!
```{r}
R - (C[,1] %*% t(C[,1]))
```

Notice the values on the diagonals of $\mathbf{c_1}\mathbf{c_1}'$.
```{r}
diag(C[,1] %*% t(C[,1]))
```
These aren't 1, like they are in $R$. But they are proportional: this is the amount of variance in each observed variable that is explained by this first component. Sound familiar? 
```{r}
pc1$communality
```
And likewise the 1 minus these is the unexplained variance:  
```{r}
1 - diag(C[,1] %*% t(C[,1]))
pc1$uniquenesses
```
