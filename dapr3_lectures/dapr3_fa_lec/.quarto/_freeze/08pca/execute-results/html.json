{
  "hash": "6c43d9205117080eecf0efb64180dd3e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Principal Component Analysis\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n# Course Overview\n\n\n<table style=\"border: 1px solid black;>\n  <tr style=\"padding: 0 1em 0 1em;\">\n    <td rowspan=\"5\" style=\"border: 1px solid black;padding: 0 1em 0 1em;opacity:1;text-align:center;vertical-align: middle\">\n        <b>multilevel modelling<br>working with group structured data</b></td>\n    <td style=\"border: 1px solid black;padding: 0 1em 0 1em;opacity:1\">\n        regression refresher</td>\n  </tr>\n  <tr><td style=\"border: 1px solid black;padding: 0 1em 0 1em;opacity:1\">\n        introducing multilevel models</td></tr>\n  <tr><td style=\"border: 1px solid black;padding: 0 1em 0 1em;opacity:1\">\n        more complex groupings</td></tr>\n  <tr><td style=\"border: 1px solid black;padding: 0 1em 0 1em;opacity:1\">\n        centering, assumptions, and diagnostics</td></tr>\n  <tr><td style=\"border: 1px solid black;padding: 0 1em 0 1em;opacity:1\">\n        recap</td></tr>\n\n  <tr style=\"padding: 0 1em 0 1em;\">\n    <td rowspan=\"5\" style=\"border: 1px solid black;padding: 0 1em 0 1em;opacity:1;text-align:center;vertical-align: middle\">\n        <b>factor analysis<br>working with multi-item measures</b></td>\n    <td style=\"border: 1px solid black;padding: 0 1em 0 1em;opacity:1\">\n        what is a psychometric test?</td>\n  </tr>\n  <tr><td style=\"border: 1px solid black;padding: 0 1em 0 1em;opacity:1\">\n        <b>using composite scores to simplify data (PCA)</b></td></tr>\n  <tr><td style=\"border: 1px solid black;padding: 0 1em 0 1em;opacity:0.4\">\n        uncovering underlying constructs (EFA)</td></tr>\n  <tr><td style=\"border: 1px solid black;padding: 0 1em 0 1em;opacity:0.4\">\n        more EFA</td></tr>\n  <tr><td style=\"border: 1px solid black;padding: 0 1em 0 1em;opacity:0.4\">\n        recap</td></tr>\n</table>\n\n\n# This week {transition=\"slide\"}\n\n- Introduction to data reduction\n- Purpose of PCA\n- Eigenvalues & Variance  \n- Eigenvectors, loadings & Interpreting PCA\n- PCA scores\n\n\n\n\n\n\n# Introduction to data reduction\n\n## What's data/dimension reduction?\n\n+ Mathematical and statistical procedures\n  + Reduce large set of variables to a smaller set\n  + Several forms of data reduction\n\t  \n+ (Typically) Reduce sets of variables measured across\n\t+ **Principal components analysis**\n\t+ **Factor analysis**\n\t+ Correspondence analysis (nominal categories)\n\t  \n+ (Typically) reduce sets of observations (individuals) into smaller groups\n  + K-means clustering\n  + Latent class analysis\n\n+ (Typically) to position observations along an unmeasured dimensions\n  + Multidimensional scaling\n\n\n## Uses of dimension reduction techniques\n\n- Theory testing\n  - What are the number and nature of dimensions that best describe a theoretical construct?\n  - e.g. debates in intelligence and personality \n\n- Test construction\n  - How should I group my items into sub-scales?\n  - Which items are the best measures of my  constructs?\n  - e.g. anywhere where we construct a test (differential, social, developmental)\n\n- Pragmatic\n  - I have multicollinearity issues/too many variables, how can I defensibly combine my variables?\n  - e.g. Genetics (GWAS), big data, predictive modelling\n    \n\n## Questions to ask before you start\n\n\n::::{.columns}\n:::{.column width=\"50%\"}\n\n+ Why are your variables correlated?\n  + Agnostic/don't care\n  + Believe there *are* underlying \"causes\" of these correlations\n\n+ What are your goals?\n  + Just reduce the number of variables\n  + Reduce your variables and learn about/model their underlying\n  (latent) causes\n\n:::\n\n:::{.column width=\"50%\"}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](08pca_files/figure-revealjs/unnamed-chunk-4-1.png){width=529}\n:::\n:::\n\n\n\n:::\n::::\n\n\n## Questions to ask before you start\n\n\n::::{.columns}\n:::{.column width=\"50%\"}\n\n+ Why are your variables correlated?\n  + **Agnostic/don't care**\n  + Believe there *are* underlying \"causes\" of these correlations\n\n+ What are your goals?\n  + **Just reduce the number of variables**\n  + Reduce your variables and learn about/model their underlying\n  (latent) causes\n  \n:::\n:::{.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](08pca_files/figure-revealjs/unnamed-chunk-5-1.png){width=529}\n:::\n:::\n\n\n:::\n::::\n\n# Purpose of PCA\n\n\n## Principal components analysis\n\n+ Goal is explaining as much of the total variance in a data set as possible\n  + Starts with original data\n  + Calculates covariances (correlations) between variables\n  + Applies procedure called **eigendecomposition** to calculate a set of linear composites of the original variables\n\n\n## An example {.smaller}\n\n- In our path analysis example, we included two health covariates. \n\n- Suppose instead we measured many more health variables, and we wanted to create a composite score where higher scores represent better health. \n- We measure:\n\n    1. Average hours of sleep per night (2 week average)\n    2. Average minutes of exercise per day (2 week average)\n    3. Average calorific intake per day (2 week average)    \n    4. Steps per day outside of exercise (2 week average)\n    5. Count of physical health conditions (high blood pressure,     diabetes, cardiovascular disease etc. max score 10)\n    6. BMI\n\n- We collect this data on 750 participants.\n    \n\n\n\n\n## PCA\n\n\n::::{.columns}\n:::{.column width=\"50%\"}\n- Starts with a correlation matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#compute the correlation matrix for the aggression items\nround(cor(health),2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           sleep exercise calories steps conditions  BMI\nsleep       1.00     0.65     0.49  0.40       0.23 0.14\nexercise    0.65     1.00     0.63  0.47       0.29 0.23\ncalories    0.49     0.63     1.00  0.33       0.17 0.17\nsteps       0.40     0.47     0.33  1.00       0.21 0.15\nconditions  0.23     0.29     0.17  0.21       1.00 0.11\nBMI         0.14     0.23     0.17  0.15       0.11 1.00\n```\n\n\n:::\n:::\n\n:::\n\n:::{.column width=\"50%\" .fragment}\n- And turns this into an output which represents the degree to which each item contributes to a composite\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nPrincipal Components Analysis\nCall: principal(r = health, nfactors = 1, rotate = \"none\")\nStandardized loadings (pattern matrix) based upon correlation matrix\n            PC1   h2   u2 com\nsleep      0.79 0.63 0.37   1\nexercise   0.88 0.77 0.23   1\ncalories   0.76 0.57 0.43   1\nsteps      0.66 0.43 0.57   1\nconditions 0.43 0.19 0.81   1\nBMI        0.35 0.12 0.88   1\n\n                PC1\nSS loadings    2.71\nProportion Var 0.45\n\nMean item complexity =  1\nTest of the hypothesis that 1 component is sufficient.\n\nThe root mean square of the residuals (RMSR) is  0.1 \n with the empirical chi square  238  with prob <  2.9e-46 \n\nFit based upon off diagonal values = 0.92\n```\n\n\n:::\n:::\n\n:::\n::::\n\n\n\n## What PCA does do?\n\n- Repackages the variance from the correlation matrix into a set  of **components**\n\n- Components = orthogonal (i.e.,uncorrelated) linear combinations of the original variables\n  - 1st component is the linear combination that accounts for the most possible variance\n  - 2nd accounts for second-largest after the variance accounted for by the first is removed\n  - 3rd...etc...\n\n- Each component accounts for as much remaining variance as possible\n\n\n## What PCA does do?\n\n- If variables are very closely related (large correlations), then we can represent them by fewer composites.\n\n- If variables are not very closely related (small correlations), then we will need more composites to adequately represent them.\n\n- In the extreme, if variables are entirely uncorrelated, we will need as many components as there were variables in original correlation matrix.\n\n\n## Thinking about dimensions\n\n\n\n::::{.columns}\n:::{.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](08pca_files/figure-revealjs/unnamed-chunk-7-1.svg)\n:::\n:::\n\n\n\n:::\n\n:::{.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](08pca_files/figure-revealjs/unnamed-chunk-8-1.svg)\n:::\n:::\n\n:::\n::::\n\n## Eigendecomposition\n\n- Components are formed using an **eigen-decomposition** of the correlation matrix\n\n- Eigen-decomposition is a transformation of the correlation matrix to re-express it in terms of **eigenvalues**: and **eigenvectors**\n\n- Eigenvalues are a measure of the size of the variance packaged into a component\n    - Larger eigenvalues mean that the component accounts for a large proportion of the variance.\n    - Visually (previous slide) eigenvalues are the length of the line\n    \n- Eigenvectors provide information on the relationship of each variable to each component.\n  - Visually, eigenvectors provide the direction of the line.\n\n- There is one eigenvector and one eigenvalue for each component\n\n\n## Eigenvalues and eigenvectors\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"e1\" \"e2\" \"e3\" \"e4\" \"e5\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      component1 component2 component3 component4 component5\nitem1 \"w11\"      \"w12\"      \"w13\"      \"w14\"      \"w15\"     \nitem2 \"w21\"      \"w22\"      \"w23\"      \"w24\"      \"w25\"     \nitem3 \"w31\"      \"w32\"      \"w33\"      \"w34\"      \"w35\"     \nitem4 \"w41\"      \"w42\"      \"w43\"      \"w44\"      \"w45\"     \nitem5 \"w51\"      \"w52\"      \"w53\"      \"w54\"      \"w55\"     \n```\n\n\n:::\n:::\n\n\n\n- Eigenvectors are sets of **weights** (one weight per variable in original correlation matrix)\n  - e.g., if we had 5 variables each eigenvector would contain 5 weights\n  - Larger weights mean  a variable makes a bigger contribution to the component\n\n\n# Eigenvalues & Variance\n\n## Eigen-decomposition of health items\n  \n- We can use the eigen() function to conduct an eigen-decomposition for our health items\n\n\n::: {.cell}\n\n```{.r .cell-code}\neigen(cor(health))\n```\n:::\n\n\n\n## Eigen-decomposition of health items\n\n- Eigenvalues:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.714 0.934 0.880 0.689 0.491 0.292\n```\n\n\n:::\n:::\n\n\n- Eigenvectors\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n       [,1]   [,2]   [,3]   [,4]   [,5]   [,6]\n[1,] -0.481  0.225  0.055  0.126  0.732 -0.404\n[2,] -0.534  0.093  0.079  0.134  0.046  0.824\n[3,] -0.459  0.173  0.246  0.386 -0.643 -0.367\n[4,] -0.398  0.069 -0.042 -0.888 -0.186 -0.107\n[5,] -0.264 -0.280 -0.901  0.167 -0.089 -0.075\n[6,] -0.210 -0.910  0.342  0.000  0.076 -0.071\n```\n\n\n:::\n:::\n\n\n## Eigenvalues and variance\n\n- It is important to understand some basic rules about eigenvalues and variance.\n\n- The sum of the eigenvalues will equal the number of variables in the data set.\n  - The covariance of an item with itself is 1 (think the diagonal in a correlation matrix)\n  - Adding these up = total variance.\n  - A full eigendecomposition accounts for all variance distributed across eigenvalues.\n  - So the sum of the eigenvalues must = 6 for our example.\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nsum(eigen_res$values)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n\n## Eigenvalues and variance\n\n- Given this, if we want to know the variance accounted for my a given component:\n\n$$\\frac{eigenvalue}{totalvariance}$$\n\n\nor $$\\frac{eigenvalue}{p}$$, where $p$ = number of items.\n\n\n## Eigenvalues and variance\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(eigen_res$values/sum(eigen_res$values))*100\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 45.23 15.56 14.67 11.48  8.19  4.86\n```\n\n\n:::\n:::\n\n\n- and if we sum this\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum((eigen_res$values/sum(eigen_res$values))*100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 100\n```\n\n\n:::\n:::\n\n\n\n## How many components to keep?\n\n- The relation of eigenvalues to variance is useful to us in order to understand how many components we should retain in our analysis \n\n- Eigen-decomposition repackages the variance but does not reduce our dimensions\n\n- Dimension reduction comes from keeping only the largest components\n    - Assume the others can be dropped with little loss of information\n\n- Our decisions on how many components to keep can be guided by several methods\n    - Set a amount of variance you wish to account for\n    - Scree plot\n    - Minimum average partial test (MAP)\n    - Parallel analysis\n\n\n\n## Variance accounted for\n\n- As has been noted, each component accounts for some proportion of the variance in our original data.\n\n- The simplest method we can use to select a number of components is simply to state a minimum variance we wish to account for.\n  - We then select the number of components above this value.\n\n\n## Scree plot\n\n- Based on plotting the eigenvalues\n  - Remember our eigenvalues are representing variance.\n\n- Looking for a sudden change of slope\n\n- Assumed to potentially reflect point at which components become substantively unimportant\n  - As the slope flattens, each subsequent component is not explaining much additional variance.\n\n\n## Constructing a scree plot\n\n\n::::{.columns}\n:::{.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\neigenvalues<-eigen(cor(agg.items))$values\nplot(eigenvalues, type = 'b', pch = 16, \n     main = \"Scree Plot\", xlab=\"\", \n     ylab=\"Eigenvalues\")\naxis(1, at = 1:10, labels = 1:10)\n```\n:::\n\n\n-  Eigenvalue plot\n    - x-axis is component number\n    - y-axis is eigenvalue for each component\n\n- Keep the components with eigenvalues above a kink in the plot\n\n:::\n\n:::{.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](08pca_files/figure-revealjs/Scree plot example2-1.svg)\n:::\n:::\n\n\n:::\n::::\n\n\n## Further scree plot examples\n\n\n::::{.columns}\n:::{.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](08pca_files/figure-revealjs/Scree plot example 1-1.svg)\n:::\n:::\n\n\n:::\n\n:::{.column width=\"50%\"}\n\n- Scree plots vary in how easy it is to interpret them\n\n:::\n::::\n\n\n## Further scree plot examples\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](08pca_files/figure-revealjs/Scree plot example 2-1.svg)\n:::\n:::\n\n\n## Further scree plot examples\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](08pca_files/figure-revealjs/Scree plot example 3-1.svg)\n:::\n:::\n\n\n\n## Minimum average partial test (MAP)\n\n- Extracts components iteratively from the correlation matrix\n\n- Computes the average squared partial correlation after each extraction\n  - This is the MAP value.\n\n- At first this quantity goes down with each component extracted but then it starts to increase again\n\n- MAP keeps the components from point at which the average squared partial correlation is at its smallest\n\n## MAP test for the aggression items\n\n\n::::{.columns}\n:::{.column width=\"50%\"}\n\n- We can obtain the results of the MAP test via the `vss()` function from the psych package\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(psych)\nvss(health)\n```\n:::\n\n\n:::\n\n:::{.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](08pca_files/figure-revealjs/unnamed-chunk-14-1.svg)\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.0447 0.1189 0.2308 0.4654 1.0000     NA\n```\n\n\n:::\n:::\n\n\n:::\n::::\n\n## Parallel analysis\n\n- Simulates datasets with same number of participants and variables but no correlations \n\n- Computes an eigen-decomposition for the simulated datasets\n\n- Compares the average eigenvalue across the simulated datasets for each component\n\n- If a real eigenvalue exceeds the corresponding average eigenvalue from the simulated datasets it is retained\n\n- We can also use alternative methods to compare our real versus simulated eigenvalues\n    - e.g. 95% percentile of the simulated eigenvalue distributions\n\n## Parallel analysis for the aggression items\n\n\n::::{.columns}\n:::{.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nfa.parallel(health, n.iter=500)\n```\n:::\n\n:::\n\n:::{.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](08pca_files/figure-revealjs/unnamed-chunk-16-1.svg)\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nParallel analysis suggests that the number of factors =  1  and the number of components =  1 \n```\n\n\n:::\n:::\n\n:::\n::::\n\n## Limitations of scree, MAP, and parallel analysis\n\n- There is no one right answer about the number of components to retain\n\n- Scree plot, MAP and parallel analysis frequently disagree\n\n- Each method has weaknesses\n    - Scree plots are subjective and may have multiple or no obvious kinks\n    - Parallel analysis sometimes suggest too many components (over-extraction)\n    - MAP sometimes suggests too few components (under-extraction)\n\n- Examining the PCA solutions should also form part of the decision\n  - Do components make practical sense given purpose?\n  - Do components make substantive sense?\n\n\n\n# Eigenvectors, loadings & Interpreting PCA\n\n## Eigenvectors & PCA Loadings\n\n- Whereas we use eigenvalues to think about variance, we use eigenvectors to think about the nature of components.\n\n- To do so, we convert eigenvectors to PCA loadings.\n  - A PCA loading gives the strength of the relationship between the item and the component.\n  - Range from -1 to 1\n  - The higher the absolute value, the stronger the relationship.\n  \n- The sum of the squared loadings for any variable on all components will equal 1.\n  - That is all the variance in the item is explained by the full decomposition.\n  \n\n## Eigenvectors & PCA Loadings\n\n- We get the loadings by:\n\n- $a_{ij}^* = a_{ij}\\sqrt{\\lambda_j}$\n    - where\n        - $a_{ij}^*$ = the component loading for item $i$ on component $j$\n        - $a_{ij}$ = the associated eigenvector value\n        - $\\lambda_j$ is the eigenvalue for component $j$\n\n- Essentially we are scaling the eigenvectors by the eigenvalues such that the components with the largest eigenvalues have the largest loadings.\n\n\n## Looking again at the loadings\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nPrincipal Components Analysis\nCall: principal(r = health, nfactors = 1, rotate = \"none\")\nStandardized loadings (pattern matrix) based upon correlation matrix\n            PC1   h2   u2 com\nsleep      0.79 0.63 0.37   1\nexercise   0.88 0.77 0.23   1\ncalories   0.76 0.57 0.43   1\nsteps      0.66 0.43 0.57   1\nconditions 0.43 0.19 0.81   1\nBMI        0.35 0.12 0.88   1\n\n                PC1\nSS loadings    2.71\nProportion Var 0.45\n\nMean item complexity =  1\nTest of the hypothesis that 1 component is sufficient.\n\nThe root mean square of the residuals (RMSR) is  0.1 \n with the empirical chi square  238  with prob <  2.9e-46 \n\nFit based upon off diagonal values = 0.92\n```\n\n\n:::\n:::\n\n\n\n\n## Running a PCA with fewer components\n\n- We can run a PCA keeping just a selected number of components \n\n- We do this using the `principal()` function from then psych package\n\n- We supply the dataframe or correlation matrix as the first argument\n\n- We specify the number of components to retain with the `nfactors=` argument\n\n- It can be useful to compare and contrast the solutions with different numbers of components\n    - Allows us to check which solutions make most sense based on substantive/practical considerations\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPC1<-principal(health, nfactors=1, rotate=\"none\") \nPC2<-principal(health, nfactors=2, rotate=\"none\") \n```\n:::\n\n\n\n## Interpreting the components\n\n- Once we have decided how many components to keep (or to help us decide) we examine the PCA solution\n\n- We do this based on the component loadings\n    - Component loadings are calculated from the values in the eigenvectors\n    - They can be interpreted as the correlations between variables and components\n\n\n## The component loadings\n\n\n\n::::{.columns}\n:::{.column width=\"50%\"}\n- Component loading matrix\n\n    1. Average hours of sleep per night (2 week average)\n    2. Average minutes of exercise per day (2 week average)\n    3. Average calorific intake per day (2 week average)    \n    4. Steps per day outside of exercise (2 week average)\n    5. Count of physical health conditions (high blood pressure, diabetes, cardiovascular disease etc. max score 10)\n    6. BMI\n\n:::\n\n:::{.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPC1$loadings\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nLoadings:\n           PC1  \nsleep      0.793\nexercise   0.880\ncalories   0.757\nsteps      0.656\nconditions 0.434\nBMI        0.345\n\n                 PC1\nSS loadings    2.714\nProportion Var 0.452\n```\n\n\n:::\n:::\n\n\n:::\n::::\n\n## How good is my PCA solution?\n\n\n::::{.columns}\n:::{.column width=\"50%\"}\n- A good PCA solution explains the variance of the original correlation matrix in as few components as possible\n:::\n\n:::{.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nPC1$loadings\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nLoadings:\n           PC1  \nsleep      0.793\nexercise   0.880\ncalories   0.757\nsteps      0.656\nconditions 0.434\nBMI        0.345\n\n                 PC1\nSS loadings    2.714\nProportion Var 0.452\n```\n\n\n:::\n:::\n\n:::\n::::\n\n\n\n# Part 5: PCA scores\n\n\n## Computing scores for the components\n\n- After conducting a PCA you may want to create scores for the new dimensions\n    - e.g., to use in a regression\n\n- Simplest method is to sum the scores for all items that are deemed to \"belong\" to a component. \n  - This idea is usually on the size of the component loadings\n  - A loading of >|.3| is typically used. \n\n- Better method is to compute them taking into account the weights\n  - i.e. based on the eigenvalues and vectors\n\n\n## Computing component scores in R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscores <- PC1$scores\nhead(scores)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         PC1\n[1,]  0.0632\n[2,]  0.0599\n[3,]  1.2109\n[4,] -1.3994\n[5,] -1.0295\n[6,]  0.3647\n```\n\n\n:::\n:::\n\n\n## Reporting a PCA\n\n- Main principles: transparency and reproducibility\n- Method\n    - Methods used to decide on number of factors\n    - Rotation method\n  \n- Results\n    - Scree test (& any other considerations in choice of number of components)\n    - How many components were retained\n    - The loading matrix for the chosen solution\n    - Variance explained by components\n    - Labelling and interpretation of the components\n    \n\n# End\n",
    "supporting": [
      "08pca_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}